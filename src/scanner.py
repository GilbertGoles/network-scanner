import nmap
import netifaces
import json
import socket
from datetime import datetime

class NetworkScanner:
    def __init__(self):
        self.nm = nmap.PortScanner()
        self.network_info = {}
        self.devices = []
        
    def get_local_network(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ WiFi"""
        try:
            gateways = netifaces.gateways()
            default_gateway = gateways['default'][netifaces.AF_INET][0]
            
            for interface in netifaces.interfaces():
                addrs = netifaces.ifaddresses(interface)
                if netifaces.AF_INET in addrs:
                    for addr_info in addrs[netifaces.AF_INET]:
                        ip = addr_info['addr']
                        if ip.startswith('192.168.') or ip.startswith('10.') or (ip.startswith('172.') and 16 <= int(ip.split('.')[1]) <= 31):
                            netmask = addr_info.get('netmask', '255.255.255.0')
                            network = self._calculate_network(ip, netmask)
                            
                            self.network_info = {
                                'local_ip': ip,
                                'gateway': default_gateway,
                                'network': network,
                                'netmask': netmask,
                                'interface': interface
                            }
                            return self.network_info
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ç–∏: {e}")
            return None
    
    def _calculate_network(self, ip, netmask):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –ø–æ IP –∏ –º–∞—Å–∫–µ"""
        ip_parts = [int(x) for x in ip.split('.')]
        mask_parts = [int(x) for x in netmask.split('.')]
        network_parts = [ip_parts[i] & mask_parts[i] for i in range(4)]
        return '.'.join(str(x) for x in network_parts) + '/24'
    
    def scan_network(self, network_range=None):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏"""
        if not network_range:
            if not self.network_info:
                self.get_local_network()
            network_range = self.network_info.get('network', '192.168.1.0/24')
        
        print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {network_range}")
        
        try:
            # –ü–ï–†–í–ê–Ø –°–¢–ê–î–ò–Ø: –¢–æ–ª—å–∫–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–±—ã—Å—Ç—Ä–æ)
            print("üîç –°—Ç–∞–¥–∏—è 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
            self.nm.scan(hosts=network_range, arguments='-sn --min-rate 1000')
            
            self.devices = []
            for host in self.nm.all_hosts():
                device_info = self._create_device_info(host)
                self.devices.append(device_info)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(self.devices)}")
            
            # –í–¢–û–†–ê–Ø –°–¢–ê–î–ò–Ø: –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è —à–ª—é–∑–∞
            print("üîç –°—Ç–∞–¥–∏—è 2: –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            self._detailed_scan_with_priority()
            
            return self.devices
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return []

    def _create_device_info(self, host):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        device_info = {
            'ip': host,
            'mac': 'Unknown',
            'vendor': 'Unknown',
            'hostname': 'Unknown',
            'status': self.nm[host].state(),
            'os': 'Unknown',
            'ports': [],
            'last_seen': datetime.now().isoformat()
        }
        
        # –ü–æ–ª—É—á–∞–µ–º MAC –∞–¥—Ä–µ—Å
        if 'addresses' in self.nm[host]:
            for addr_type, addr_value in self.nm[host]['addresses'].items():
                if addr_type == 'mac':
                    device_info['mac'] = addr_value
                    break
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ–Ω–¥–æ—Ä–∞
        if 'vendor' in self.nm[host] and device_info['mac'] in self.nm[host]['vendor']:
            device_info['vendor'] = self.nm[host]['vendor'][device_info['mac']]
        elif device_info['mac'] != 'Unknown':
            device_info['vendor'] = f"MAC: {device_info['mac']}"
        
        # –ü–æ–ª—É—á–∞–µ–º hostname
        if 'hostnames' in self.nm[host] and self.nm[host]['hostnames']:
            hostname = self.nm[host]['hostnames'][0]['name']
            device_info['hostname'] = hostname if hostname else self._get_hostname_fallback(host)
        
        return device_info

    def _get_hostname_fallback(self, ip):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è hostname"""
        try:
            hostname = socket.gethostbyaddr(ip)[0]
            return hostname
        except:
            return "Unknown"

    def _detailed_scan_with_priority(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –¥–ª—è –≤–∞–∂–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        # –°–Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä—É–µ–º —à–ª—é–∑ –∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        priority_devices = []
        normal_devices = []
        
        for device in self.devices:
            # –®–ª—é–∑ –∏–º–µ–µ—Ç –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if (device['ip'] == self.network_info.get('gateway') or 
                device['ip'] == self.network_info.get('local_ip') or
                device['hostname'] in ['_gateway', 'localhost', 'router'] or
                'gateway' in device['hostname'].lower()):
                priority_devices.append(device)
            else:
                normal_devices.append(device)
        
        print(f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(priority_devices)}")
        print(f"üì± –û–±—ã—á–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(normal_devices)}")
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –±–æ–ª–µ–µ –¥–æ–ª–≥–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        for device in priority_devices:
            try:
                print(f"üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {device['ip']} ({device.get('hostname', 'Unknown')})")
                self.nm.scan(hosts=device['ip'], 
                            arguments='-sS -O -A --min-rate 500 --host-timeout 60s')
                self._update_device_info(device)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {device['ip']}: {e}")
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –±—ã—Å—Ç—Ä—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        for device in normal_devices:
            try:
                print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é {device['ip']}...")
                self.nm.scan(hosts=device['ip'], 
                            arguments='-sS -O --osscan-limit --max-retries 1 --host-timeout 20s')
                self._update_device_info(device)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {device['ip']}: {e}")

    def _update_device_info(self, device):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø–æ—Å–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        host = device['ip']
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –û–°
            if 'osmatch' in self.nm[host] and self.nm[host]['osmatch']:
                best_os = self.nm[host]['osmatch'][0]
                accuracy = best_os.get('accuracy', '0')
                device['os'] = f"{best_os['name']} (accuracy: {accuracy}%)"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º hostname (–µ—Å–ª–∏ –Ω–∞—à–ª–∏ –ª—É—á—à–µ)
            if 'hostnames' in self.nm[host] and self.nm[host]['hostnames']:
                hostname = self.nm[host]['hostnames'][0]['name']
                if hostname and hostname != device['ip'] and hostname not in ['', 'localhost']:
                    device['hostname'] = hostname
            
            # –û–±–Ω–æ–≤–ª—è–µ–º MAC –∏ vendor –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞–Ω–µ–µ
            if (device['mac'] == 'Unknown' or device['vendor'] == 'Unknown') and 'addresses' in self.nm[host]:
                for addr_type, addr_value in self.nm[host]['addresses'].items():
                    if addr_type == 'mac':
                        device['mac'] = addr_value
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –≤–µ–Ω–¥–æ—Ä–∞
                        if 'vendor' in self.nm[host] and addr_value in self.nm[host]['vendor']:
                            device['vendor'] = self.nm[host]['vendor'][addr_value]
                        break
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ—Ä—Ç—ã
            device['ports'] = []
            if 'tcp' in self.nm[host]:
                for port, info in self.nm[host]['tcp'].items():
                    if info['state'] == 'open':
                        device['ports'].append({
                            'port': port,
                            'state': info['state'],
                            'service': info['name'],
                            'version': info.get('version', 'Unknown')
                        })
            
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {device['ip']} -> {device['hostname']} | {device['os']}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è {device['ip']}: {e}")

    def export_results(self, devices, filename):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON"""
        data = {
            'scan_time': datetime.now().isoformat(),
            'network_info': self.network_info,
            'devices': devices
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

    def get_device_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        return len(self.devices)

    def get_network_summary(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Ç–∏"""
        if not self.network_info:
            return "–°–µ—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        
        devices_by_os = {}
        for device in self.devices:
            os_name = device['os'].split(' (')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –û–°
            devices_by_os[os_name] = devices_by_os.get(os_name, 0) + 1
        
        detailed_devices = len([d for d in self.devices if d['os'] != 'Unknown'])
        
        summary = f"üåê –°–µ—Ç—å: {self.network_info['network']}\n"
        summary += f"üìä –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(self.devices)}\n"
        summary += f"üîç –î–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {detailed_devices}\n"
        summary += "‚öôÔ∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –û–°:\n"
        for os_name, count in devices_by_os.items():
            summary += f"  ‚Ä¢ {os_name}: {count}\n"
        
        return summary

    def get_device_details(self, ip_address):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø–æ IP"""
        for device in self.devices:
            if device['ip'] == ip_address:
                details = f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device['hostname']} ({device['ip']})\n"
                details += f"üîß MAC: {device['mac']}\n"
                details += f"üè∑Ô∏è Vendor: {device['vendor']}\n"
                details += f"üíª –û–°: {device['os']}\n"
                details += f"üì° –°—Ç–∞—Ç—É—Å: {device['status']}\n"
                
                if device['ports']:
                    details += f"üîì –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã ({len(device['ports'])}):\n"
                    for port in device['ports']:
                        details += f"  ‚Ä¢ {port['port']}/tcp - {port['service']} ({port['version']})\n"
                else:
                    details += "üîí –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
                
                return details
        return f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å IP {ip_address} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
