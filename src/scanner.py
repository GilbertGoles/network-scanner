import nmap
import netifaces
import json
import socket
from datetime import datetime

class NetworkScanner:
    def __init__(self):
        self.nm = nmap.PortScanner()
        self.network_info = {}
        self.devices = []
        
    def get_local_network(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ WiFi"""
        try:
            gateways = netifaces.gateways()
            default_gateway = gateways['default'][netifaces.AF_INET][0]
            
            for interface in netifaces.interfaces():
                addrs = netifaces.ifaddresses(interface)
                if netifaces.AF_INET in addrs:
                    for addr_info in addrs[netifaces.AF_INET]:
                        ip = addr_info['addr']
                        if ip.startswith('192.168.') or ip.startswith('10.') or (ip.startswith('172.') and 16 <= int(ip.split('.')[1]) <= 31):
                            netmask = addr_info.get('netmask', '255.255.255.0')
                            network = self._calculate_network(ip, netmask)
                            
                            self.network_info = {
                                'local_ip': ip,
                                'gateway': default_gateway,
                                'network': network,
                                'netmask': netmask,
                                'interface': interface
                            }
                            return self.network_info
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ç–∏: {e}")
            return None
    
    def _calculate_network(self, ip, netmask):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–µ—Ç–∏ –ø–æ IP –∏ –º–∞—Å–∫–µ"""
        ip_parts = [int(x) for x in ip.split('.')]
        mask_parts = [int(x) for x in netmask.split('.')]
        network_parts = [ip_parts[i] & mask_parts[i] for i in range(4)]
        return '.'.join(str(x) for x in network_parts) + '/24'
    
    def scan_network(self, network_range=None):
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏ - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è!"""
        if not network_range:
            if not self.network_info:
                self.get_local_network()
            network_range = self.network_info.get('network', '192.168.1.0/24')
        
        print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {network_range}")
        
        try:
            # –û–ß–ò–©–ê–ï–ú —Å—Ç–∞—Ä—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            self.devices = []
            
            # –ü–ï–†–í–ê–Ø –°–¢–ê–î–ò–Ø: –¢–æ–ª—å–∫–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–±—ã—Å—Ç—Ä–æ)
            print("üîç –°—Ç–∞–¥–∏—è 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–µ—Ç–∏...")
            self.nm.scan(hosts=network_range, arguments='-sn --min-rate 1000')
            
            # –°–û–•–†–ê–ù–Ø–ï–ú –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            all_hosts = list(self.nm.all_hosts())
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç–∞–¥–∏–∏: {len(all_hosts)}")
            
            for host in all_hosts:
                device_info = self._create_device_info(host)
                self.devices.append(device_info)
                print(f"   üìç {host} - {device_info['hostname']} ({device_info['mac']})")
            
            # –í–¢–û–†–ê–Ø –°–¢–ê–î–ò–Ø: –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –í–°–ï–• —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            if self.devices:
                print(f"üîç –°—Ç–∞–¥–∏—è 2: –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {len(self.devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
                self._detailed_scan_all_devices()
            else:
                print("‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            print(f"üéØ –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(self.devices)}")
            return self.devices
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return []

    def _create_device_info(self, host):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        device_info = {
            'ip': host,
            'mac': 'Unknown',
            'vendor': 'Unknown',
            'hostname': 'Unknown',
            'status': self.nm[host].state(),
            'os': 'Unknown',
            'hardware': {
                'type': 'Unknown',
                'architecture': 'Unknown', 
                'vendor': 'Unknown',
                'model': 'Unknown',
                'confidence': '0%'
            },
            'ports': [],
            'last_seen': datetime.now().isoformat(),
            'scan_stage': 'basic'  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –Ω–∞ –∫–∞–∫–æ–π —Å—Ç–∞–¥–∏–∏ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
        }
        
        # –ü–æ–ª—É—á–∞–µ–º MAC –∞–¥—Ä–µ—Å
        if 'addresses' in self.nm[host]:
            for addr_type, addr_value in self.nm[host]['addresses'].items():
                if addr_type == 'mac':
                    device_info['mac'] = addr_value
                    break
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–µ–Ω–¥–æ—Ä–∞
        if 'vendor' in self.nm[host] and device_info['mac'] in self.nm[host]['vendor']:
            device_info['vendor'] = self.nm[host]['vendor'][device_info['mac']]
            device_info['hardware'] = self._enhance_hardware_info_from_vendor(device_info['vendor'], device_info['hardware'])
        elif device_info['mac'] != 'Unknown':
            device_info['vendor'] = f"MAC: {device_info['mac']}"
        
        # –ü–æ–ª—É—á–∞–µ–º hostname
        if 'hostnames' in self.nm[host] and self.nm[host]['hostnames']:
            hostname = self.nm[host]['hostnames'][0]['name']
            device_info['hostname'] = hostname if hostname else self._get_hostname_fallback(host)
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∂–µ–ª–µ–∑–∞
        device_info['hardware'] = self._classify_hardware_from_basic_info(device_info)
        
        return device_info

    def _get_hostname_fallback(self, ip):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è hostname"""
        try:
            hostname = socket.gethostbyaddr(ip)[0]
            return hostname
        except:
            return "Unknown"

    def _detailed_scan_all_devices(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –í–°–ï–• —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        successful_scans = 0
        
        for i, device in enumerate(self.devices, 1):
            try:
                print(f"üîç [{i}/{len(self.devices)}] –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {device['ip']}")
                
                # –î–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                if (device['ip'] == self.network_info.get('gateway') or 
                    device['ip'] == self.network_info.get('local_ip')):
                    print(f"   üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device['ip']}")
                    self.nm.scan(hosts=device['ip'], 
                                arguments='-sS -O -A --min-rate 500 --host-timeout 60s')
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ - –±—ã—Å—Ç—Ä—ã–π —Å–∫–∞–Ω
                    self.nm.scan(hosts=device['ip'], 
                                arguments='-sS -O --osscan-limit --max-retries 1 --host-timeout 30s')
                
                # –û–ë–ù–û–í–õ–Ø–ï–ú –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∞ –Ω–µ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
                self._update_device_info(device)
                device['scan_stage'] = 'detailed'
                successful_scans += 1
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {device['ip']}: {e}")
                # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Å—Ç–∞–µ—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–∞–∂–µ –µ—Å–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {successful_scans}/{len(self.devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

    def _update_device_info(self, device):
        """–û–ë–ù–û–í–õ–Ø–ï–ú –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –∞ –Ω–µ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ"""
        host = device['ip']
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –û–° –µ—Å–ª–∏ –Ω–∞—à–ª–∏
            if 'osmatch' in self.nm[host] and self.nm[host]['osmatch']:
                best_os = self.nm[host]['osmatch'][0]
                accuracy = best_os.get('accuracy', '0')
                device['os'] = f"{best_os['name']} (accuracy: {accuracy}%)"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–µ–ª–µ–∑–µ
                device['hardware'] = self._extract_hardware_info(best_os, device)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º hostname –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –ª—É—á—à–µ
            if 'hostnames' in self.nm[host] and self.nm[host]['hostnames']:
                hostname = self.nm[host]['hostnames'][0]['name']
                if hostname and hostname != device['ip'] and hostname not in ['', 'localhost']:
                    device['hostname'] = hostname
            
            # –û–±–Ω–æ–≤–ª—è–µ–º MAC –∏ vendor –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞–Ω–µ–µ
            if (device['mac'] == 'Unknown' or device['vendor'] == 'Unknown') and 'addresses' in self.nm[host]:
                for addr_type, addr_value in self.nm[host]['addresses'].items():
                    if addr_type == 'mac':
                        device['mac'] = addr_value
                        if 'vendor' in self.nm[host] and addr_value in self.nm[host]['vendor']:
                            device['vendor'] = self.nm[host]['vendor'][addr_value]
                            device['hardware'] = self._enhance_hardware_info_from_vendor(device['vendor'], device['hardware'])
                        break
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ—Ä—Ç—ã
            device['ports'] = []
            if 'tcp' in self.nm[host]:
                for port, info in self.nm[host]['tcp'].items():
                    if info['state'] == 'open':
                        device['ports'].append({
                            'port': port,
                            'state': info['state'],
                            'service': info['name'],
                            'version': info.get('version', 'Unknown')
                        })
            
            print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {device['ip']} -> {device['hostname']} | {device['os']}")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è {device['ip']}: {e}")

    def _extract_hardware_info(self, os_match, device):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–µ–ª–µ–∑–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –û–°"""
        hardware_info = device.get('hardware', {
            'type': 'Unknown',
            'architecture': 'Unknown',
            'vendor': 'Unknown',
            'model': 'Unknown',
            'confidence': '0%'
        })
        
        try:
            if 'osclass' in os_match and os_match['osclass']:
                os_class = os_match['osclass'][0]
                hardware_info['type'] = os_class.get('type', hardware_info['type'])
                hardware_info['vendor'] = os_class.get('vendor', hardware_info['vendor'])
                hardware_info['architecture'] = os_class.get('osfamily', hardware_info['architecture'])
                hardware_info['confidence'] = os_class.get('accuracy', '0') + '%'
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
            hardware_info['type'] = self._classify_hardware_type(hardware_info, device)
            
            # –ü–∞—Ä—Å–∏–º –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –û–°
            os_name = os_match.get('name', '')
            if hardware_info['model'] == 'Unknown':
                hardware_info['model'] = self._extract_model_from_os(os_name, hardware_info['vendor'])
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–µ–ª–µ–∑–µ: {e}")
        
        return hardware_info

    def _classify_hardware_type(self, hardware_info, device):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ –∂–µ–ª–µ–∑–∞"""
        vendor = hardware_info['vendor'].lower()
        device_type = hardware_info['type'].lower()
        hostname = device['hostname'].lower()
        os_info = device['os'].lower()
        
        # –ú–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if any(word in vendor for word in ['samsung', 'xiaomi', 'huawei', 'oneplus', 'google', 'motorola', 'oppo', 'vivo']):
            if 'phone' in device_type or 'mobile' in device_type or 'android' in os_info:
                return 'Smartphone'
            return 'Mobile Device'
        
        # Apple —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        elif 'apple' in vendor:
            if 'iphone' in hostname or 'ios' in os_info:
                return 'iPhone'
            elif 'ipad' in hostname:
                return 'iPad'
            elif 'mac' in hostname or 'macos' in os_info:
                return 'Mac Computer'
            return 'Apple Device'
        
        # –°–µ—Ç–µ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        elif any(word in vendor for word in ['cisco', 'tp-link', 'd-link', 'asus', 'netgear', 'mikrotik', 'ubiquiti', 'tenda']):
            if 'router' in hostname or 'gateway' in hostname:
                return 'Router'
            elif 'switch' in hostname:
                return 'Network Switch'
            elif 'access point' in hostname or 'ap' in hostname:
                return 'Access Point'
            return 'Network Device'
        
        # –ö–æ–º–ø—å—é—Ç–µ—Ä—ã
        elif any(word in vendor for word in ['dell', 'hp', 'lenovo', 'asus', 'acer', 'msi', 'gigabyte']):
            if 'laptop' in hostname or 'notebook' in hostname:
                return 'Laptop'
            elif 'server' in hostname:
                return 'Server'
            return 'Desktop Computer'
        
        # IoT —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        elif any(word in vendor for word in ['raspberry', 'arduino', 'espressif']):
            return 'IoT Device'
        
        # –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏
        elif any(word in hostname for word in ['playstation', 'xbox', 'nintendo']):
            return 'Gaming Console'
        
        # Smart TV
        elif any(word in hostname for word in ['tv', 'smarttv', 'androidtv']):
            return 'Smart TV'
        
        # –ü—Ä–∏–Ω—Ç–µ—Ä—ã
        elif any(word in vendor for word in ['canon', 'hp', 'epson', 'brother']):
            return 'Printer'
        
        # –°–µ—Ä–≤–µ—Ä—ã
        elif any(word in hostname for word in ['server', 'nas', 'storage', 'cloud']):
            return 'Server'
        
        return hardware_info['type'] if hardware_info['type'] != 'Unknown' else 'General Purpose Device'

    def _extract_model_from_os(self, os_name, vendor):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –û–°"""
        os_name_lower = os_name.lower()
        vendor_lower = vendor.lower()
        
        # –î–ª—è Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if 'android' in os_name_lower:
            if 'samsung' in vendor_lower:
                return 'Samsung Phone/Tablet'
            elif 'xiaomi' in vendor_lower:
                return 'Xiaomi Phone'
            elif 'huawei' in vendor_lower:
                return 'Huawei Phone'
            elif 'google' in vendor_lower:
                return 'Google Pixel'
            return 'Android Device'
        
        # –î–ª—è iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        elif 'ios' in os_name_lower or 'iphone' in os_name_lower:
            return 'iPhone/iPad'
        
        # –î–ª—è Windows
        elif 'windows' in os_name_lower:
            return 'Windows PC'
        
        # –î–ª—è Linux
        elif 'linux' in os_name_lower:
            return 'Linux Device'
        
        return 'Unknown'

    def _enhance_hardware_info_from_vendor(self, vendor, existing_hardware):
        """–£–ª—É—á—à–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∂–µ–ª–µ–∑–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ vendor"""
        if existing_hardware.get('vendor') == 'Unknown' and vendor != 'Unknown':
            existing_hardware['vendor'] = vendor
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ø–æ MAC vendor
        vendor_lower = vendor.lower()
        
        if 'samsung' in vendor_lower:
            existing_hardware['model'] = 'Samsung Device'
        elif 'apple' in vendor_lower:
            existing_hardware['model'] = 'Apple Device'
        elif 'xiaomi' in vendor_lower:
            existing_hardware['model'] = 'Xiaomi Device'
        elif 'huawei' in vendor_lower:
            existing_hardware['model'] = 'Huawei Device'
        elif 'google' in vendor_lower:
            existing_hardware['model'] = 'Google Device'
        elif 'dell' in vendor_lower:
            existing_hardware['model'] = 'Dell Computer'
        elif 'hp' in vendor_lower:
            existing_hardware['model'] = 'HP Computer'
        elif 'lenovo' in vendor_lower:
            existing_hardware['model'] = 'Lenovo Computer'
        elif 'asus' in vendor_lower:
            existing_hardware['model'] = 'ASUS Device'
        
        return existing_hardware

    def _classify_hardware_from_basic_info(self, device):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∂–µ–ª–µ–∑–∞ –ø–æ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        hardware_info = device.get('hardware', {
            'type': 'Unknown',
            'architecture': 'Unknown',
            'vendor': 'Unknown',
            'model': 'Unknown',
            'confidence': '0%'
        })
        
        hostname = device['hostname'].lower()
        vendor = device['vendor'].lower()
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ hostname
        if 'android' in hostname:
            hardware_info['type'] = 'Smartphone'
        elif 'iphone' in hostname or 'ipad' in hostname:
            hardware_info['type'] = 'Apple Mobile'
        elif 'router' in hostname or 'gateway' in hostname:
            hardware_info['type'] = 'Router'
        elif 'raspberry' in hostname:
            hardware_info['type'] = 'IoT Device'
            hardware_info['model'] = 'Raspberry Pi'
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ vendor
        if any(word in vendor for word in ['samsung', 'xiaomi', 'huawei']):
            hardware_info['type'] = 'Smartphone'
        elif 'apple' in vendor:
            hardware_info['type'] = 'Apple Device'
        
        return hardware_info

    def export_results(self, devices, filename):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON"""
        data = {
            'scan_time': datetime.now().isoformat(),
            'network_info': self.network_info,
            'devices': devices
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)

    def get_device_count(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        return len(self.devices)

    def get_network_summary(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Ç–∏"""
        if not self.network_info:
            return "–°–µ—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
        
        devices_by_type = {}
        devices_by_os = {}
        
        for device in self.devices:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∂–µ–ª–µ–∑–∞
            device_type = device['hardware'].get('type', 'Unknown')
            devices_by_type[device_type] = devices_by_type.get(device_type, 0) + 1
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –û–°
            os_name = device['os'].split(' (')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –û–°
            devices_by_os[os_name] = devices_by_os.get(os_name, 0) + 1
        
        detailed_devices = len([d for d in self.devices if d['os'] != 'Unknown'])
        
        summary = f"üåê –°–µ—Ç—å: {self.network_info['network']}\n"
        summary += f"üìä –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(self.devices)}\n"
        summary += f"üîç –î–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {detailed_devices}\n\n"
        
        summary += "üõ†Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤:\n"
        for device_type, count in devices_by_type.items():
            summary += f"  ‚Ä¢ {device_type}: {count}\n"
        
        summary += "\nüíª –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –û–°:\n"
        for os_name, count in devices_by_os.items():
            summary += f"  ‚Ä¢ {os_name}: {count}\n"
        
        return summary

    def get_device_details(self, ip_address):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø–æ IP"""
        for device in self.devices:
            if device['ip'] == ip_address:
                details = f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device['hostname']} ({device['ip']})\n"
                details += f"üîß MAC: {device['mac']}\n"
                details += f"üè∑Ô∏è Vendor: {device['vendor']}\n"
                details += f"üíª –û–°: {device['os']}\n"
                details += f"üì° –°—Ç–∞—Ç—É—Å: {device['status']}\n"
                details += f"üîç –°—Ç–∞–¥–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {device.get('scan_stage', 'basic')}\n\n"
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–µ–ª–µ–∑–µ
                hardware = device['hardware']
                details += "üõ†Ô∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ñ–ï–õ–ï–ó–ï:\n"
                details += f"‚Ä¢ –¢–∏–ø: {hardware.get('type', 'Unknown')}\n"
                details += f"‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {hardware.get('architecture', 'Unknown')}\n"
                details += f"‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {hardware.get('vendor', 'Unknown')}\n"
                details += f"‚Ä¢ –ú–æ–¥–µ–ª—å: {hardware.get('model', 'Unknown')}\n"
                details += f"‚Ä¢ –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å: {hardware.get('confidence', '0%')}\n\n"
                
                if device['ports']:
                    details += f"üîì –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã ({len(device['ports'])}):\n"
                    for port in device['ports']:
                        details += f"  ‚Ä¢ {port['port']}/tcp - {port['service']} ({port['version']})\n"
                else:
                    details += "üîí –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
                
                details += f"\n‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ: {device['last_seen']}"
                
                return details
        return f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å IP {ip_address} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
