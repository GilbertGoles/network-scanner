import json
import time
import threading
from typing import List, Dict, Any, Optional

# –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –î–û try-except
EXTERNAL_APIS_AVAILABLE = False
CVE_INTEGRATION = None
VULNERS_INTEGRATION = None

try:
    from cve_integration import CVEIntegration
    from vulners_integration import VulnersIntegration
    EXTERNAL_APIS_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–µ API –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    print("üìÅ –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã cve_integration.py –∏ vulners_integration.py")

class AdvancedVulnerabilityScanner:
    def __init__(self):
        self.vulnerabilities = []
        self.scan_progress = {
            'current': 0,
            'total': 0,
            'stage': '',
            'active': False
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        self.cve_integration = None
        self.vulners_integration = None
        
        if EXTERNAL_APIS_AVAILABLE:
            try:
                self.cve_integration = CVEIntegration()
                self.vulners_integration = VulnersIntegration()
                print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫–∞–Ω–µ—Ä —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")
        else:
            print("‚úÖ –ë–∞–∑–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def scan_network_vulnerabilities(self, scan_results: Dict[str, Any]) -> Dict[str, Any]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Å–µ—Ç–∏"""
        if self.scan_progress['active']:
            return {'error': '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è'}
        
        self.vulnerabilities = []
        self.scan_progress.update({
            'current': 0,
            'total': 100,
            'stage': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π',
            'active': True
        })
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scan_thread = threading.Thread(
            target=self._perform_vulnerability_scan,
            args=(scan_results,)
        )
        scan_thread.daemon = True
        scan_thread.start()
        
        return {'status': 'started', 'type': 'vulnerability_scan'}
    
    def _perform_vulnerability_scan(self, scan_results: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        try:
            hosts_data = scan_results.get('results', {})
            total_hosts = len(hosts_data)
            
            if total_hosts == 0:
                self.scan_progress.update({
                    'stage': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
                    'active': False
                })
                return
            
            print(f"üîç –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è {total_hosts} —Ö–æ—Å—Ç–æ–≤")
            
            processed_hosts = 0
            all_vulnerabilities = []
            
            for host, host_info in hosts_data.items():
                if not self.scan_progress['active']:
                    break
                
                self.scan_progress['stage'] = f'–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞ {host}'
                
                # –°–∫–∞–Ω–∏—Ä—É–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ö–æ—Å—Ç–∞
                host_vulns = self._scan_device_vulnerabilities_enhanced(host, host_info)
                all_vulnerabilities.extend(host_vulns)
                
                processed_hosts += 1
                progress = (processed_hosts / total_hosts) * 100
                self.scan_progress['current'] = progress
            
            self.vulnerabilities = all_vulnerabilities
            
            self.scan_progress.update({
                'current': 100,
                'stage': '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                'active': False
            })
            
            print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ: {len(all_vulnerabilities)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {e}")
            self.scan_progress.update({
                'stage': f'–û—à–∏–±–∫–∞: {str(e)}',
                'active': False
            })
    
    def _scan_device_vulnerabilities_enhanced(self, host: str, host_info: Dict) -> List[Dict[str, Any]]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        vulnerabilities = []
        
        try:
            # –ê–Ω–∞–ª–∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            for port_info in host_info.get('ports', []):
                if port_info.get('state') == 'open':
                    port_vulns = self._analyze_service_vulnerabilities(host, port_info)
                    vulnerabilities.extend(port_vulns)
            
            # –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            os_vulns = self._analyze_os_vulnerabilities(host_info)
            vulnerabilities.extend(os_vulns)
            
            # –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_vulns = self._analyze_security_posture(host, host_info)
            vulnerabilities.extend(security_vulns)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è {host}: {e}")
        
        return vulnerabilities
    
    def _analyze_service_vulnerabilities(self, host: str, port_info: Dict) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Å–µ—Ä–≤–∏—Å–∞"""
        vulnerabilities = []
        
        try:
            service = port_info.get('service', '')
            version = port_info.get('version', '')
            product = port_info.get('product', '')
            port = port_info.get('port', '')
            protocol = port_info.get('protocol', 'tcp')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º CPE —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞
            cpe_string = self._generate_cpe_string(service, product, version)
            
            # –ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ CVE Integration
            cve_vulns = []
            if self.cve_integration and EXTERNAL_APIS_AVAILABLE:
                cve_vulns = self.cve_integration.search_cve_by_cpe(cpe_string)
            
            # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Vulners
            vulners_vulns = []
            if self.vulners_integration and EXTERNAL_APIS_AVAILABLE:
                software_name = product if product else service
                vulners_vulns = self.vulners_integration.search_vulnerabilities(software_name, version)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            all_service_vulns = cve_vulns + vulners_vulns
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for vuln in all_service_vulns:
                vulnerability = {
                    'host': host,
                    'port': port,
                    'protocol': protocol,
                    'service': service,
                    'product': product,
                    'version': version,
                    'vulnerability_id': vuln.get('id', ''),
                    'title': vuln.get('title', vuln.get('description', 'Unknown Vulnerability')),
                    'description': vuln.get('description', ''),
                    'cvss_score': vuln.get('cvss_score', 0.0),
                    'severity': vuln.get('severity', 'UNKNOWN'),
                    'type': 'service_vulnerability',
                    'cpe': cpe_string,
                    'source': vuln.get('source', 'unknown')
                }
                vulnerabilities.append(vulnerability)
            
            # –ë–∞–∑–æ–≤–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            heuristic_vulns = self._heuristic_service_analysis(host, port, service, version, product)
            vulnerabilities.extend(heuristic_vulns)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä–≤–∏—Å–∞ {service} –Ω–∞ –ø–æ—Ä—Ç—É {port}: {e}")
        
        return vulnerabilities
    
    def _generate_cpe_string(self, service: str, product: str, version: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CPE —Å—Ç—Ä–æ–∫–∏"""
        try:
            vendor = self._get_vendor_from_product(product, service)
            product_name = product.lower() if product else service.lower()
            
            # –ë–∞–∑–æ–≤–∞—è CPE 2.3 —Å—Ç—Ä–æ–∫–∞
            cpe = f"cpe:2.3:a:{vendor}:{product_name}:{version}:*:*:*:*:*:*:*"
            return cpe
            
        except:
            return f"cpe:2.3:a:unknown:{service.lower()}:{version}:*:*:*:*:*:*:*"
    
    def _get_vendor_from_product(self, product: str, service: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É"""
        vendor_mapping = {
            'apache': 'apache',
            'nginx': 'nginx',
            'microsoft-iis': 'microsoft',
            'openssh': 'openssh',
            'vsftpd': 'vsftpd',
            'proftpd': 'proftpd',
            'mysql': 'mysql',
            'postgresql': 'postgresql',
            'tomcat': 'apache',
            'wordpress': 'wordpress',
            'joomla': 'joomla',
            'drupal': 'drupal'
        }
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
        product_lower = (product or '').lower()
        for key, vendor in vendor_mapping.items():
            if key in product_lower:
                return vendor
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å–µ—Ä–≤–∏—Å—É
        service_lower = service.lower()
        for key, vendor in vendor_mapping.items():
            if key in service_lower:
                return vendor
        
        return 'unknown'
    
    def _heuristic_service_analysis(self, host: str, port: int, service: str, version: str, product: str) -> List[Dict[str, Any]]:
        """–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        vulnerabilities = []
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏
        vulnerable_versions = {
            'vsftpd': {
                '2.3.4': {
                    'id': 'CVE-2011-2523',
                    'title': 'VSFTPD Backdoor Vulnerability',
                    'description': 'VSFTPD version 2.3.4 contains a backdoor that allows remote code execution',
                    'cvss_score': 9.3,
                    'severity': 'CRITICAL'
                }
            },
            'openssh': {
                '7.4': {
                    'id': 'CVE-2016-6515',
                    'title': 'OpenSSH Denial of Service',
                    'description': 'Buffer overflow in OpenSSH before 7.3',
                    'cvss_score': 7.5,
                    'severity': 'HIGH'
                }
            },
            'apache': {
                '2.4.49': {
                    'id': 'CVE-2021-41773',
                    'title': 'Apache Path Traversal',
                    'description': 'Path traversal vulnerability in Apache HTTP Server 2.4.49',
                    'cvss_score': 7.5,
                    'severity': 'HIGH'
                },
                '2.4.50': {
                    'id': 'CVE-2021-42013',
                    'title': 'Apache Path Traversal RCE',
                    'description': 'Path traversal and remote code execution in Apache HTTP Server 2.4.50',
                    'cvss_score': 9.8,
                    'severity': 'CRITICAL'
                }
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
        for product_key, versions in vulnerable_versions.items():
            if product_key in (product or '').lower() or product_key in service.lower():
                for vuln_version, vuln_info in versions.items():
                    if vuln_version in (version or ''):
                        vulnerability = {
                            'host': host,
                            'port': port,
                            'service': service,
                            'product': product,
                            'version': version,
                            'vulnerability_id': vuln_info['id'],
                            'title': vuln_info['title'],
                            'description': vuln_info['description'],
                            'cvss_score': vuln_info['cvss_score'],
                            'severity': vuln_info['severity'],
                            'type': 'known_vulnerable_version',
                            'source': 'heuristic_analysis'
                        }
                        vulnerabilities.append(vulnerability)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–æ—Ä—Ç–∞–º
        port_vulnerabilities = self._analyze_port_vulnerabilities(host, port, service)
        vulnerabilities.extend(port_vulnerabilities)
        
        return vulnerabilities
    
    def _analyze_port_vulnerabilities(self, host: str, port: int, service: str) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ –Ω–æ–º–µ—Ä–∞–º –ø–æ—Ä—Ç–æ–≤"""
        vulnerabilities = []
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ—Ä—Ç—ã
        risky_ports = {
            21: {'service': 'FTP', 'risk': 'HIGH', 'issues': ['Plain text authentication', 'Data interception']},
            23: {'service': 'Telnet', 'risk': 'HIGH', 'issues': ['Plain text authentication', 'No encryption']},
            25: {'service': 'SMTP', 'risk': 'MEDIUM', 'issues': ['Open relay potential', 'Spam abuse']},
            135: {'service': 'RPC', 'risk': 'HIGH', 'issues': ['Multiple vulnerabilities', 'Worm propagation']},
            139: {'service': 'NetBIOS', 'risk': 'HIGH', 'issues': ['Information disclosure', 'SMB vulnerabilities']},
            445: {'service': 'SMB', 'risk': 'CRITICAL', 'issues': ['EternalBlue', 'WannaCry vulnerability']},
            1433: {'service': 'MSSQL', 'risk': 'HIGH', 'issues': ['Brute force attacks', 'SQL injection']},
            3389: {'service': 'RDP', 'risk': 'HIGH', 'issues': ['BlueKeep', 'Brute force attacks']},
            5900: {'service': 'VNC', 'risk': 'HIGH', 'issues': ['Weak authentication', 'Screen capture']}
        }
        
        if port in risky_ports:
            port_info = risky_ports[port]
            vulnerability = {
                'host': host,
                'port': port,
                'service': service,
                'vulnerability_id': f'RISKY-PORT-{port}',
                'title': f'Risky Open Port: {port} ({port_info["service"]})',
                'description': f'Port {port} ({port_info["service"]}) is open and considered risky. Issues: {", ".join(port_info["issues"])}',
                'cvss_score': 7.0 if port_info['risk'] == 'HIGH' else 5.0,
                'severity': port_info['risk'],
                'type': 'risky_port',
                'source': 'port_analysis'
            }
            vulnerabilities.append(vulnerability)
        
        return vulnerabilities
    
    def _analyze_os_vulnerabilities(self, host_info: Dict) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        vulnerabilities = []
        
        try:
            os_matches = host_info.get('os', [])
            if not os_matches:
                return vulnerabilities
            
            # –ë–µ—Ä–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—É—é –û–°
            best_os_match = max(os_matches, key=lambda x: x.get('accuracy', 0))
            os_name = best_os_match.get('name', '')
            os_accuracy = best_os_match.get('accuracy', 0)
            
            if os_accuracy < 80:  # –¢—Ä–µ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
                return vulnerabilities
            
            # –ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è –û–°
            if self.cve_integration and EXTERNAL_APIS_AVAILABLE:
                # –§–æ—Ä–º–∏—Ä—É–µ–º CPE –¥–ª—è –û–°
                os_cpe = self._generate_os_cpe(os_name)
                os_vulns = self.cve_integration.search_cve_by_cpe(os_cpe)
                
                for vuln in os_vulns:
                    vulnerability = {
                        'host': list(host_info.keys())[0] if host_info else 'unknown',
                        'vulnerability_id': vuln.get('cve_id', ''),
                        'title': f'OS Vulnerability: {vuln.get("description", "")[:100]}',
                        'description': vuln.get('description', ''),
                        'cvss_score': vuln.get('cvss_score', 0.0),
                        'severity': vuln.get('severity', 'UNKNOWN'),
                        'type': 'os_vulnerability',
                        'os': os_name,
                        'source': vuln.get('source', 'cve')
                    }
                    vulnerabilities.append(vulnerability)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –û–° —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {e}")
        
        return vulnerabilities
    
    def _generate_os_cpe(self, os_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CPE –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        os_mapping = {
            'windows': 'cpe:2.3:o:microsoft:windows:*:*:*:*:*:*:*:*',
            'linux': 'cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*',
            'macos': 'cpe:2.3:o:apple:macos:*:*:*:*:*:*:*:*',
            'android': 'cpe:2.3:o:google:android:*:*:*:*:*:*:*:*',
            'ios': 'cpe:2.3:o:apple:ios:*:*:*:*:*:*:*:*'
        }
        
        os_lower = os_name.lower()
        for key, cpe in os_mapping.items():
            if key in os_lower:
                return cpe
        
        return 'cpe:2.3:o:unknown:unknown:*:*:*:*:*:*:*:*'
    
    def _analyze_security_posture(self, host: str, host_info: Dict) -> List[Dict[str, Any]]:
        """–ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        vulnerabilities = []
        
        try:
            open_ports = [p for p in host_info.get('ports', []) if p.get('state') == 'open']
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
            if len(open_ports) > 50:
                vulnerabilities.append({
                    'host': host,
                    'vulnerability_id': 'TOO-MANY-PORTS',
                    'title': 'Excessive Number of Open Ports',
                    'description': f'Device has {len(open_ports)} open ports, which may indicate poor security posture',
                    'cvss_score': 5.0,
                    'severity': 'MEDIUM',
                    'type': 'security_posture',
                    'source': 'security_analysis'
                })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–ø–∞—Å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            dangerous_services = ['telnet', 'rsh', 'rexec', 'rlogin', 'netbios', 'snmp']
            for port_info in open_ports:
                service = (port_info.get('service') or '').lower()
                if any(dangerous_service in service for dangerous_service in dangerous_services):
                    vulnerabilities.append({
                        'host': host,
                        'port': port_info.get('port'),
                        'service': port_info.get('service'),
                        'vulnerability_id': 'DANGEROUS-SERVICE',
                        'title': f'Dangerous Service Running: {port_info.get("service")}',
                        'description': f'Service {port_info.get("service")} on port {port_info.get("port")} is considered dangerous and should be disabled',
                        'cvss_score': 6.5,
                        'severity': 'MEDIUM',
                        'type': 'dangerous_service',
                        'source': 'security_analysis'
                    })
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_vulns = self._check_common_misconfigurations(host, host_info)
            vulnerabilities.extend(config_vulns)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        
        return vulnerabilities
    
    def _check_common_misconfigurations(self, host: str, host_info: Dict) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        vulnerabilities = []
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π SSL/TLS, —Å–ª–∞–±—ã—Ö —à–∏—Ñ—Ä–æ–≤ –∏ —Ç.–¥.
        
        return vulnerabilities
    
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        if self.scan_progress['active']:
            self.scan_progress['active'] = False
            self.scan_progress['stage'] = '–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π'
            print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
    
    def get_vulnerability_results(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        return {
            'vulnerabilities': self.vulnerabilities,
            'progress': self.scan_progress,
            'summary': self._generate_vulnerability_summary()
        }
    
    def _generate_vulnerability_summary(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º"""
        total_vulns = len(self.vulnerabilities)
        
        severity_count = {
            'CRITICAL': 0,
            'HIGH': 0,
            'MEDIUM': 0,
            'LOW': 0,
            'UNKNOWN': 0
        }
        
        service_vulns = {}
        host_vulns = {}
        
        for vuln in self.vulnerabilities:
            severity = vuln.get('severity', 'UNKNOWN')
            severity_count[severity] = severity_count.get(severity, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
            service = vuln.get('service', 'unknown')
            service_vulns[service] = service_vulns.get(service, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ö–æ—Å—Ç–∞–º
            host = vuln.get('host', 'unknown')
            host_vulns[host] = host_vulns.get(host, 0) + 1
        
        # –¢–æ–ø —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ CVSS
        top_vulnerabilities = sorted(
            self.vulnerabilities, 
            key=lambda x: x.get('cvss_score', 0), 
            reverse=True
        )[:10]
        
        return {
            'total_vulnerabilities': total_vulns,
            'severity_distribution': severity_count,
            'service_distribution': service_vulns,
            'host_distribution': host_vulns,
            'top_vulnerabilities': top_vulns,
            'scan_timestamp': time.time()
        }
    
    def export_vulnerabilities(self, format_type: str = "json") -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        import json
        
        if format_type == "json":
            return json.dumps({
                'vulnerabilities': self.vulnerabilities,
                'summary': self._generate_vulnerability_summary()
            }, indent=2, ensure_ascii=False)
        else:
            return str(self.vulnerabilities)


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    def test_vulnerability_scanner():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AdvancedVulnerabilityScanner"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AdvancedVulnerabilityScanner...")
        
        scanner = AdvancedVulnerabilityScanner()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        test_scan_results = {
            'results': {
                '192.168.1.1': {
                    'hostname': 'router.local',
                    'state': 'up',
                    'ports': [
                        {
                            'port': 80,
                            'state': 'open',
                            'service': 'http',
                            'product': 'Apache',
                            'version': '2.4.49',
                            'cpe': 'cpe:/a:apache:http_server:2.4.49'
                        },
                        {
                            'port': 22,
                            'state': 'open', 
                            'service': 'ssh',
                            'product': 'OpenSSH',
                            'version': '7.4',
                            'cpe': 'cpe:/a:openssh:openssh:7.4'
                        },
                        {
                            'port': 21,
                            'state': 'open',
                            'service': 'ftp',
                            'product': 'VSFTPD',
                            'version': '2.3.4',
                            'cpe': 'cpe:/a:vsftpd:vsftpd:2.3.4'
                        }
                    ],
                    'os': [
                        {'name': 'Linux 3.2 - 4.9', 'accuracy': 95}
                    ]
                }
            }
        }
        
        # –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        print("\nüîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
        result = scanner.scan_network_vulnerabilities(test_scan_results)
        print(f"   –°—Ç–∞—Ç—É—Å: {result.get('status')}")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while scanner.scan_progress['active']:
            time.sleep(1)
            progress = scanner.scan_progress
            print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress['current']:.1f}% - {progress['stage']}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        vuln_results = scanner.get_vulnerability_results()
        summary = vuln_results.get('summary', {})
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:")
        print(f"   –í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {summary.get('total_vulnerabilities', 0)}")
        
        severity_dist = summary.get('severity_distribution', {})
        for severity, count in severity_dist.items():
            if count > 0:
                print(f"   {severity}: {count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        top_vulns = summary.get('top_vulnerabilities', [])
        if top_vulns:
            print("\nüéØ –¢–æ–ø —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:")
            for i, vuln in enumerate(top_vulns[:3]):
                print(f"   {i+1}. {vuln.get('vulnerability_id')} - {vuln.get('severity')} ({vuln.get('cvss_score')})")
                print(f"      {vuln.get('title')}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_vulnerability_scanner()
