import subprocess
import xml.etree.ElementTree as ET
from datetime import datetime
import os
import sys

class VulnerabilityScanner:
    def __init__(self):
        self.vulnerabilities = []
        # Используем системный nmap
        self.nmap_path = self._find_nmap_path()
        print(f"Using nmap from: {self.nmap_path}")
    
    def _find_nmap_path(self):
        """Находим путь к системному nmap"""
        # Пробуем разные возможные пути
        possible_paths = [
            '/usr/bin/nmap',
            '/usr/local/bin/nmap', 
            '/bin/nmap',
            '/usr/bin/nmap'
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                return path
        
        # Если не нашли, используем который в PATH
        return 'nmap'
    
    def check_scripts_installed(self):
        """Проверка установлены ли скрипты безопасности"""
        missing_scripts = []
        
        # Проверяем основные скрипты безопасности
        scripts_to_check = ['vulners', 'vulscan', 'http-vulners-regex']
        
        for script in scripts_to_check:
            if not self._is_script_available(script):
                missing_scripts.append(script)
        
        if not missing_scripts:
            print("All security scripts are available")
            return []
        else:
            print(f"Missing scripts: {missing_scripts}")
            return missing_scripts
    
    def _is_script_available(self, script_name):
        """Проверка доступности конкретного скрипта"""
        try:
            cmd = [self.nmap_path, '--script', script_name, '--script-help']
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=10)
            
            if result.returncode == 0 and script_name.upper() in result.stdout:
                print(f"Script {script_name} is available")
                return True
            else:
                print(f"Script {script_name} not found")
                return False
                
        except subprocess.TimeoutExpired:
            print(f"Timeout checking script {script_name}")
            return False
        except Exception as e:
            print(f"Error checking script {script_name}: {e}")
            return False
    
    def scan_device_vulnerabilities(self, device_ip, ports=None):
        """Сканирование уязвимостей устройства"""
        print(f"Scanning vulnerabilities for {device_ip}...")
        
        try:
            # Формируем аргументы для сканирования
            if ports:
                port_arg = f"-p {','.join(str(p) for p in ports)}"
            else:
                port_arg = "--top-ports 50"  # Сканируем топ 50 портов
            
            # Пробуем разные скрипты по очереди
            scripts_to_try = ['vulners', 'vulscan']
            all_vulnerabilities = []
            
            for script in scripts_to_try:
                if self._is_script_available(script):
                    print(f"Trying script: {script}")
                    vulnerabilities = self._scan_with_script(device_ip, port_arg, script)
                    all_vulnerabilities.extend(vulnerabilities)
                    if vulnerabilities:
                        print(f"Found {len(vulnerabilities)} vulnerabilities with {script}")
                        break  # Если нашли уязвимости, останавливаемся
                else:
                    print(f"Script {script} not available, skipping")
            
            return all_vulnerabilities
            
        except Exception as e:
            print(f"Error scanning vulnerabilities for {device_ip}: {e}")
            return []
    
    def _scan_with_script(self, device_ip, port_arg, script_name):
        """Сканирование с использованием конкретного скрипта"""
        try:
            # Базовые аргументы nmap
            cmd = [
                self.nmap_path,
                '-sV',           # Определение версий сервисов
                '--script', script_name,
                port_arg,
                '--script-timeout', '30s',
                '--host-timeout', '120s',
                '-oX', '-',      # Вывод в XML
                device_ip
            ]
            
            # Добавляем специфические аргументы для скриптов
            if script_name == 'vulners':
                cmd.insert(cmd.index('--script') + 2, '--script-args')
                cmd.insert(cmd.index('--script-args') + 1, 'mincvss=5.0')
            
            print(f"Running: {' '.join(cmd)}")
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=180)
            
            if result.returncode == 0:
                return self._parse_nmap_xml(result.stdout, device_ip, script_name)
            else:
                print(f"Nmap error for {device_ip}: {result.stderr}")
                return []
                
        except subprocess.TimeoutExpired:
            print(f"Scan timeout for {device_ip} with {script_name}")
            return []
        except Exception as e:
            print(f"Error in {script_name} scan for {device_ip}: {e}")
            return []
    
    def _parse_nmap_xml(self, xml_output, device_ip, script_name):
        """Парсинг XML вывода nmap для извлечения уязвимостей"""
        try:
            root = ET.fromstring(xml_output)
            vulnerabilities = []
            
            for host in root.findall('host'):
                # Проверяем статус хоста
                status = host.find('status')
                if status is not None and status.get('state') != 'up':
                    continue
                
                for ports in host.findall('ports'):
                    for port in ports.findall('port'):
                        port_num = port.get('portid')
                        state = port.find('state')
                        
                        if state is not None and state.get('state') == 'open':
                            service = port.find('service')
                            service_name = service.get('name') if service is not None else 'unknown'
                            service_version = service.get('version', '') if service is not None else ''
                            
                            # Ищем скрипт с уязвимостями
                            for script in port.findall('script'):
                                if script.get('id') == script_name:
                                    vulns = self._extract_vulnerabilities(
                                        script, port_num, service_name, service_version, device_ip, script_name
                                    )
                                    vulnerabilities.extend(vulns)
            
            return vulnerabilities
            
        except ET.ParseError as e:
            print(f"XML parsing error for {device_ip}: {e}")
            return []
        except Exception as e:
            print(f"Error parsing XML for {device_ip}: {e}")
            return []
    
    def _extract_vulnerabilities(self, script, port_num, service_name, service_version, device_ip, script_name):
        """Извлечение информации об уязвимостях"""
        vulns = []
        output = script.get('output', '')
        
        if script_name == 'vulners':
            # Парсим вывод vulners
            for line in output.split('\n'):
                line = line.strip()
                if line and any(keyword in line for keyword in ['CVE-', 'VULNERABLE:', 'EXPLOIT:']):
                    vuln_info = {
                        'device_ip': device_ip,
                        'port': port_num,
                        'service': service_name,
                        'version': service_version,
                        'description': line,
                        'risk_level': self._assess_risk_level(line),
                        'script_used': script_name,
                        'timestamp': datetime.now().isoformat()
                    }
                    vulns.append(vuln_info)
        
        elif script_name == 'vulscan':
            # Парсим вывод vulscan
            for line in output.split('\n'):
                line = line.strip()
                if line and any(keyword in line for keyword in ['CVE-', 'VULN:']):
                    vuln_info = {
                        'device_ip': device_ip,
                        'port': port_num,
                        'service': service_name,
                        'version': service_version,
                        'description': line,
                        'risk_level': self._assess_risk_level(line),
                        'script_used': script_name,
                        'timestamp': datetime.now().isoformat()
                    }
                    vulns.append(vuln_info)
        
        return vulns
    
    def _assess_risk_level(self, vuln_line):
        """Оценка уровня риска на основе описания уязвимости"""
        line_lower = vuln_line.lower()
        
        if any(word in line_lower for word in ['critical', '10.0', '9.']):
            return 'CRITICAL'
        elif any(word in line_lower for word in ['high', '8.', '7.']):
            return 'HIGH'
        elif any(word in line_lower for word in ['medium', '6.', '5.']):
            return 'MEDIUM'
        elif any(word in line_lower for word in ['low', '4.', '3.']):
            return 'LOW'
        else:
            return 'INFO'
    
    def generate_vulnerability_report(self, vulnerabilities):
        """Генерация отчета по уязвимостям"""
        if not vulnerabilities:
            return "No vulnerabilities found"
        
        report = "VULNERABILITY SCAN REPORT\n"
        report += "=" * 50 + "\n"
        report += f"Scan time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        report += f"Total vulnerabilities found: {len(vulnerabilities)}\n\n"
        
        # Группируем по устройствам
        devices_vulns = {}
        for vuln in vulnerabilities:
            ip = vuln['device_ip']
            if ip not in devices_vulns:
                devices_vulns[ip] = []
            devices_vulns[ip].append(vuln)
        
        for device_ip, vulns in devices_vulns.items():
            report += f"Device: {device_ip}\n"
            report += "-" * 30 + "\n"
            
            # Группируем по уровню риска для этого устройства
            by_risk = {'CRITICAL': [], 'HIGH': [], 'MEDIUM': [], 'LOW': [], 'INFO': []}
            for vuln in vulns:
                by_risk[vuln['risk_level']].append(vuln)
            
            for risk_level in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW', 'INFO']:
                risk_vulns = by_risk[risk_level]
                if risk_vulns:
                    report += f"\n{risk_level} risk: {len(risk_vulns)} vulnerabilities\n"
                    
                    for vuln in risk_vulns:
                        report += f"  Port {vuln['port']}/{vuln['service']}"
                        if vuln['version']:
                            report += f" ({vuln['version']})"
                        report += f"\n"
                        report += f"    {vuln['description']}\n"
                        report += f"    Found with: {vuln['script_used']}\n"
            
            report += "\n"
        
        return report

    def install_scripts_instructions(self):
        """Возвращает инструкции по установке скриптов"""
        instructions = """
To install Nmap vulnerability scripts:

1. Install Nmap (if not already installed):
   sudo apt update && sudo apt install nmap

2. Install vulners script:
   sudo wget -O /usr/share/nmap/scripts/vulners.nse https://raw.githubusercontent.com/vulnersCom/nmap-vulners/master/vulners.nse

3. Install vulscan script:
   sudo git clone https://github.com/scipag/vulscan /usr/share/nmap/scripts/vulscan
   sudo ln -s /usr/share/nmap/scripts/vulscan/vulscan.nse /usr/share/nmap/scripts/vulscan.nse

4. Update Nmap script database:
   sudo nmap --script-updatedb

5. Verify installation:
   nmap --script vulners --script-help
   nmap --script vulscan --script-help
        """
        return instructions
