import subprocess
import xml.etree.ElementTree as ET
from datetime import datetime
import os

class VulnerabilityScanner:
    def __init__(self):
        self.vulnerabilities = []
        self.nmap_path = self._find_nmap_path()
        print(f"üîß Using nmap from: {self.nmap_path}")
    
    def _find_nmap_path(self):
        """–ù–∞—Ö–æ–¥–∏–º –ø—É—Ç—å –∫ nmap"""
        possible_paths = ['/usr/bin/nmap', '/usr/local/bin/nmap', '/bin/nmap']
        for path in possible_paths:
            if os.path.exists(path):
                return path
        return 'nmap'
    
    def check_scripts_installed(self):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–¥–∞"""
        print("‚ö†Ô∏è Using fallback vulnerability detection")
        return []  # –í—Å–µ–≥–¥–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    def scan_device_vulnerabilities(self, device_ip, ports=None):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Å fallback –º–µ—Ç–æ–¥–∞–º–∏"""
        print(f"üîç Scanning {device_ip} for vulnerabilities...")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—Ä—Ç—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if ports:
                port_arg = f"-p {','.join(str(p) for p in ports)}"
            else:
                port_arg = "-F"  # –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
            vulnerabilities = []
            
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–π
            vulns_method1 = self._scan_with_version_detection(device_ip, port_arg)
            vulnerabilities.extend(vulns_method1)
            
            # –ú–µ—Ç–æ–¥ 2: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—â–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            vulns_method2 = self._scan_with_common_scripts(device_ip, port_arg)
            vulnerabilities.extend(vulns_method2)
            
            print(f"‚úÖ Found {len(vulnerabilities)} potential issues for {device_ip}")
            return vulnerabilities
            
        except Exception as e:
            print(f"‚ùå Error scanning {device_ip}: {e}")
            return []
    
    def _scan_with_version_detection(self, device_ip, port_arg):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –≤–µ—Ä—Å–∏–π (–±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥)"""
        try:
            cmd = [
                self.nmap_path, '-sV', '--version-intensity', '5',
                port_arg, '-oX', '-', device_ip
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                return self._parse_versions_for_issues(result.stdout, device_ip)
            return []
            
        except Exception as e:
            print(f"‚ùå Version scan failed for {device_ip}: {e}")
            return []
    
    def _parse_versions_for_issues(self, xml_output, device_ip):
        """–ê–Ω–∞–ª–∏–∑ –≤–µ—Ä—Å–∏–π –Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        try:
            root = ET.fromstring(xml_output)
            issues = []
            
            for host in root.findall('host'):
                for ports in host.findall('ports'):
                    for port in ports.findall('port'):
                        port_num = port.get('portid')
                        state = port.find('state')
                        
                        if state is not None and state.get('state') == 'open':
                            service = port.find('service')
                            if service is not None:
                                service_name = service.get('name', 'unknown')
                                version = service.get('version', '')
                                product = service.get('product', '')
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
                                issue = self._check_service_for_issues(service_name, version, product)
                                if issue:
                                    issues.append({
                                        'device_ip': device_ip,
                                        'port': port_num,
                                        'service': service_name,
                                        'version': version,
                                        'description': issue,
                                        'risk_level': 'MEDIUM',
                                        'script_used': 'version_detection',
                                        'timestamp': datetime.now().isoformat()
                                    })
            
            return issues
            
        except Exception as e:
            print(f"‚ùå Error parsing versions: {e}")
            return []
    
    def _check_service_for_issues(self, service, version, product):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
        service_lower = service.lower()
        version_lower = str(version).lower()
        
        # FTP –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        if service_lower == 'ftp' and 'tls' not in version_lower:
            return "FTP service without encryption - credentials transmitted in plain text"
        
        # Telnet (–≤—Å–µ–≥–¥–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–µ–Ω)
        elif service_lower == 'telnet':
            return "Telnet service - unencrypted communication, credentials exposed"
        
        # HTTP –≤–º–µ—Å—Ç–æ HTTPS
        elif service_lower == 'http' and 'https' not in version_lower:
            return "HTTP service (not HTTPS) - unencrypted web traffic"
        
        # –°—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ SSH
        elif service_lower == 'ssh' and any(old in version_lower for old in ['1.0', '1.5', '2.0']):
            return f"Older SSH version: {version} - potential vulnerabilities"
        
        # SMB v1 (—É—è–∑–≤–∏–º—ã–π)
        elif service_lower == 'microsoft-ds' and 'v1' in version_lower:
            return "SMB v1 detected - vulnerable to EternalBlue and other exploits"
        
        # –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        elif service_lower in ['mysql', 'postgresql', 'mongodb'] and 'auth' not in version_lower:
            return f"{service.upper()} service - check for authentication requirements"
        
        return None
    
    def _scan_with_common_scripts(self, device_ip, port_arg):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—â–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –µ—Å—Ç—å
            basic_scripts = ['banner', 'http-title', 'ssh-hostkey', 'ssl-cert']
            
            cmd = [
                self.nmap_path, '-sV', port_arg,
                '--script', ','.join(basic_scripts),
                '-oX', '-', device_ip
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=120)
            
            if result.returncode == 0:
                return self._parse_basic_scripts(result.stdout, device_ip)
            return []
            
        except Exception as e:
            print(f"‚ùå Basic scripts scan failed for {device_ip}: {e}")
            return []
    
    def _parse_basic_scripts(self, xml_output, device_ip):
        """–ü–∞—Ä—Å–∏–Ω–≥ –±–∞–∑–æ–≤—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        try:
            root = ET.fromstring(xml_output)
            issues = []
            
            for host in root.findall('host'):
                for ports in host.findall('ports'):
                    for port in ports.findall('port'):
                        port_num = port.get('portid')
                        
                        for script in port.findall('script'):
                            script_id = script.get('id')
                            output = script.get('output', '')
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å–∫—Ä–∏–ø—Ç–æ–≤
                            issue = self._analyze_script_output(script_id, output, port_num)
                            if issue:
                                issues.append({
                                    'device_ip': device_ip,
                                    'port': port_num,
                                    'service': script_id,
                                    'version': '',
                                    'description': issue,
                                    'risk_level': 'LOW',
                                    'script_used': script_id,
                                    'timestamp': datetime.now().isoformat()
                                })
            
            return issues
            
        except Exception as e:
            print(f"‚ùå Error parsing basic scripts: {e}")
            return []
    
    def _analyze_script_output(self, script_id, output, port):
        """–ê–Ω–∞–ª–∏–∑ –≤—ã–≤–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        if script_id == 'ssl-cert' and 'self signed' in output.lower():
            return f"Port {port}: Self-signed SSL certificate - potential MITM risk"
        
        elif script_id == 'ssh-hostkey' and '1024' in output:
            return f"Port {port}: Weak SSH host key (1024-bit) - consider upgrading to 2048-bit or higher"
        
        elif script_id == 'http-title' and any(word in output.lower() for word in ['test', 'default', 'welcome']):
            return f"Port {port}: Default or test web page - information disclosure"
        
        return None
    
    def generate_vulnerability_report(self, vulnerabilities):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º"""
        if not vulnerabilities:
            return "‚úÖ No vulnerabilities found"
        
        report = "üõ°Ô∏è VULNERABILITY SCAN REPORT\n"
        report += "=" * 50 + "\n"
        report += f"üìÖ Scan time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        report += f"üîç Total findings: {len(vulnerabilities)}\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        devices_vulns = {}
        for vuln in vulnerabilities:
            ip = vuln['device_ip']
            if ip not in devices_vulns:
                devices_vulns[ip] = []
            devices_vulns[ip].append(vuln)
        
        for device_ip, vulns in devices_vulns.items():
            report += f"üéØ Device: {device_ip}\n"
            report += "-" * 30 + "\n"
            
            for vuln in vulns:
                report += f"üî∏ Port {vuln['port']}/{vuln['service']}\n"
                report += f"   Risk: {vuln['risk_level']}\n"
                report += f"   Issue: {vuln['description']}\n"
                report += f"   Found with: {vuln['script_used']}\n\n"
        
        report += "üí° Note: This is a basic security assessment. For comprehensive\n"
        report += "vulnerability scanning, install Nmap scripts: vulners, vulscan\n"
        
        return report

    def get_installation_help(self):
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        return """
üìã TO INSTALL VULNERABILITY SCRIPTS:

1. Install required packages:
   sudo apt update && sudo apt install nmap git wget

2. Install vulners script:
   sudo wget -O /usr/share/nmap/scripts/vulners.nse \\
   https://raw.githubusercontent.com/vulnersCom/nmap-vulners/master/vulners.nse

3. Install vulscan:
   sudo git clone https://github.com/scipag/vulscan.git \\
   /usr/share/nmap/scripts/vulscan
   sudo ln -s /usr/share/nmap/scripts/vulscan/vulscan.nse \\
   /usr/share/nmap/scripts/vulscan.nse

4. Update script database:
   sudo nmap --script-updatedb

5. Verify:
   nmap --script vulners --script-help
        """
