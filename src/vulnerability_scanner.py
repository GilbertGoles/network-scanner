import subprocess
import json
import xml.etree.ElementTree as ET
from datetime import datetime

class VulnerabilityScanner:
    def __init__(self):
        self.script_paths = {
            'vulners': '/usr/share/nmap/scripts/vulners.nse',
            'vulscan': '/usr/share/nmap/scripts/vulscan.nse'
        }
        self.vulnerabilities = []
    
    def check_scripts_installed(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ —Å–∫—Ä–∏–ø—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        missing = []
        for name, path in self.script_paths.items():
            try:
                subprocess.run(['nmap', '--script', path, '--script-help'], 
                             capture_output=True, check=True)
            except:
                missing.append(name)
        return missing
    
    def scan_device_vulnerabilities(self, device_ip, ports=None):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            script_args = 'vulners,vulscan --script-args mincvss=5.0'
            
            if ports:
                port_arg = f"-p {','.join(str(p) for p in ports)}"
            else:
                port_arg = "--top-ports 100"
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º nmap —Å —Å–∫—Ä–∏–ø—Ç–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            cmd = [
                'nmap', '-sV', '--script', script_args, port_arg,
                '-oX', '-',  # –í—ã–≤–æ–¥ –≤ XML —Ñ–æ—Ä–º–∞—Ç–µ
                device_ip
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            return self._parse_nmap_xml(result.stdout, device_ip)
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π {device_ip}: {e}")
            return []
    
    def _parse_nmap_xml(self, xml_output, device_ip):
        """–ü–∞—Ä—Å–∏–Ω–≥ XML –≤—ã–≤–æ–¥–∞ nmap –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        try:
            root = ET.fromstring(xml_output)
            vulnerabilities = []
            
            for host in root.findall('host'):
                for ports in host.findall('ports'):
                    for port in ports.findall('port'):
                        port_num = port.get('portid')
                        for script in port.findall('script'):
                            if script.get('id') in ['vulners', 'vulscan']:
                                vuln_data = self._extract_vulnerabilities(script, port_num, device_ip)
                                vulnerabilities.extend(vuln_data)
            
            return vulnerabilities
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
            return []
    
    def _extract_vulnerabilities(self, script, port_num, device_ip):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö"""
        vulns = []
        output = script.get('output', '')
        
        # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ vulners/vulscan
        for line in output.split('\n'):
            if any(keyword in line.lower() for keyword in ['cve-', 'vuln:', 'risk:']):
                vuln_info = {
                    'device_ip': device_ip,
                    'port': port_num,
                    'description': line.strip(),
                    'risk_level': self._assess_risk_level(line),
                    'timestamp': datetime.now().isoformat()
                }
                vulns.append(vuln_info)
        
        return vulns
    
    def _assess_risk_level(self, vuln_line):
        """–û—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        line_lower = vuln_line.lower()
        
        if any(word in line_lower for word in ['critical', '10.0', '9.']):
            return 'CRITICAL'
        elif any(word in line_lower for word in ['high', '8.', '7.']):
            return 'HIGH'
        elif any(word in line_lower for word in ['medium', '6.', '5.']):
            return 'MEDIUM'
        else:
            return 'LOW'
    
    def generate_vulnerability_report(self, vulnerabilities):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º"""
        if not vulnerabilities:
            return "‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        
        report = "üìä –û–¢–ß–ï–¢ –ü–û –£–Ø–ó–í–ò–ú–û–°–¢–Ø–ú\n"
        report += "=" * 50 + "\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        devices_vulns = {}
        for vuln in vulnerabilities:
            ip = vuln['device_ip']
            if ip not in devices_vulns:
                devices_vulns[ip] = []
            devices_vulns[ip].append(vuln)
        
        for device_ip, vulns in devices_vulns.items():
            report += f"\nüéØ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_ip}\n"
            report += "-" * 30 + "\n"
            
            for vuln in vulns:
                report += f"üî∏ –ü–æ—Ä—Ç {vuln['port']}: {vuln['risk_level']}\n"
                report += f"   {vuln['description']}\n"
        
        return report
