import subprocess
import xml.etree.ElementTree as ET
from datetime import datetime
import threading
import concurrent.futures
from typing import List, Dict, Any

class AdvancedVulnerabilityScanner:
    def __init__(self):
        self.vulnerabilities = []
        self.scan_progress = {
            'current': 0,
            'total': 0,
            'stage': '',
            'active': False
        }
        
        # –ë–∞–∑—ã —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        self.cve_database = self._load_cve_database()
        self.exploit_db = self._load_exploit_db()
        
    def _load_cve_database(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã CVE"""
        return {
            'apache': {
                '2.4.49': ['CVE-2021-41773', 'CVE-2021-42013'],
                '2.4.50': ['CVE-2021-41773', 'CVE-2021-42013'],
            },
            'openssh': {
                '7.2': ['CVE-2016-6515'],
                '7.4': ['CVE-2017-15906'],
            },
            'vsftpd': {
                '2.3.4': ['CVE-2011-2523']
            }
        }
    
    def _load_exploit_db(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
        return {
            'CVE-2017-0143': {
                'name': 'EternalBlue',
                'risk': 'CRITICAL',
                'description': 'SMBv1 Remote Code Execution',
                'port': '445'
            },
            'CVE-2019-0708': {
                'name': 'BlueKeep', 
                'risk': 'CRITICAL',
                'description': 'RDP Remote Code Execution',
                'port': '3389'
            },
            'CVE-2021-44228': {
                'name': 'Log4Shell',
                'risk': 'CRITICAL',
                'description': 'Log4j Remote Code Execution',
                'port': '80,443,8080'
            }
        }
    
    def scan_network_vulnerabilities(self, devices: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Å–µ—Ç–∏"""
        self.scan_progress['active'] = True
        self.scan_progress['total'] = len(devices)
        self.scan_progress['current'] = 0
        self.vulnerabilities = []
        
        print("üîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
                results = list(executor.map(self._scan_device_vulnerabilities, devices))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for device_vulns in results:
                self.vulnerabilities.extend(device_vulns)
                
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(self.vulnerabilities)}")
            return self.vulnerabilities
            
        finally:
            self.scan_progress['active'] = False
    
    def _scan_device_vulnerabilities(self, device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        vulnerabilities = []
        self.scan_progress['current'] += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤
            service_vulns = self._check_service_versions(device)
            vulnerabilities.extend(service_vulns)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
            exploit_vulns = self._check_known_exploits(device)
            vulnerabilities.extend(exploit_vulns)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            security_vulns = self._check_service_security(device)
            vulnerabilities.extend(security_vulns)
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {device['ip']}: {e}")
            
        return vulnerabilities
    
    def _check_service_versions(self, device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º—ã—Ö –≤–µ—Ä—Å–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤"""
        vulnerabilities = []
        
        for service in device.get('services', []):
            service_name = service['name'].lower()
            version = service.get('version', '').lower()
            
            # –ò—â–µ–º CVE –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏ –≤–µ—Ä—Å–∏–∏
            if service_name in self.cve_database:
                for vulnerable_version, cve_list in self.cve_database[service_name].items():
                    if vulnerable_version in version:
                        for cve_id in cve_list:
                            vuln_info = self._create_vulnerability_info(device, service, cve_id)
                            vulnerabilities.append(vuln_info)
        
        return vulnerabilities
    
    def _check_known_exploits(self, device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
        vulnerabilities = []
        open_ports = [str(port['port']) for port in device.get('ports', [])]
        
        # EternalBlue (SMB)
        if '445' in open_ports:
            vuln_info = self._create_vulnerability_info(
                device, 
                {'port': '445', 'name': 'smb'}, 
                'CVE-2017-0143'
            )
            vulnerabilities.append(vuln_info)
        
        # BlueKeep (RDP)
        if '3389' in open_ports:
            vuln_info = self._create_vulnerability_info(
                device,
                {'port': '3389', 'name': 'rdp'},
                'CVE-2019-0708'
            )
            vulnerabilities.append(vuln_info)
        
        # Log4Shell (HTTP)
        http_ports = ['80', '443', '8080', '8443']
        if any(port in open_ports for port in http_ports):
            vuln_info = self._create_vulnerability_info(
                device,
                {'port': ','.join([p for p in http_ports if p in open_ports]), 'name': 'http'},
                'CVE-2021-44228'
            )
            vulnerabilities.append(vuln_info)
        
        return vulnerabilities
    
    def _check_service_security(self, device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        vulnerabilities = []
        
        for service in device.get('services', []):
            # Telnet - –≤—Å–µ–≥–¥–∞ –æ–ø–∞—Å–µ–Ω
            if service['name'] == 'telnet':
                vuln_info = {
                    'device_ip': device['ip'],
                    'device_hostname': device['hostname'],
                    'port': service['port'],
                    'service': service['name'],
                    'cve_id': 'INSECURE-PROTOCOL',
                    'name': 'Insecure Telnet Service',
                    'description': 'Telnet transmits credentials in plain text',
                    'risk_level': 'HIGH',
                    'type': 'security_misconfiguration',
                    'timestamp': datetime.now().isoformat()
                }
                vulnerabilities.append(vuln_info)
            
            # FTP - –≤—Å–µ–≥–¥–∞ –æ–ø–∞—Å–µ–Ω
            elif service['name'] == 'ftp':
                vuln_info = {
                    'device_ip': device['ip'],
                    'device_hostname': device['hostname'],
                    'port': service['port'],
                    'service': service['name'],
                    'cve_id': 'INSECURE-PROTOCOL',
                    'name': 'Insecure FTP Service',
                    'description': 'FTP transmits credentials in plain text',
                    'risk_level': 'HIGH', 
                    'type': 'security_misconfiguration',
                    'timestamp': datetime.now().isoformat()
                }
                vulnerabilities.append(vuln_info)
        
        return vulnerabilities
    
    def _create_vulnerability_info(self, device: Dict[str, Any], service: Dict[str, Any], cve_id: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        exploit_info = self.exploit_db.get(cve_id, {})
        
        return {
            'device_ip': device['ip'],
            'device_hostname': device['hostname'],
            'port': service['port'],
            'service': service['name'],
            'cve_id': cve_id,
            'name': exploit_info.get('name', 'Unknown Vulnerability'),
            'description': exploit_info.get('description', 'Unknown vulnerability description'),
            'risk_level': exploit_info.get('risk', 'HIGH'),
            'type': 'vulnerability',
            'timestamp': datetime.now().isoformat()
        }
    
    def get_scan_progress(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return self.scan_progress.copy()
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        if not self.vulnerabilities:
            return "‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        
        report = "üî• –û–¢–ß–ï–¢ –û–ë –£–Ø–ó–í–ò–ú–û–°–¢–Ø–•\n"
        report += "=" * 60 + "\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞
        critical = [v for v in self.vulnerabilities if v['risk_level'] == 'CRITICAL']
        high = [v for v in self.vulnerabilities if v['risk_level'] == 'HIGH']
        medium = [v for v in self.vulnerabilities if v['risk_level'] == 'MEDIUM']
        
        if critical:
            report += "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:\n"
            report += "-" * 40 + "\n"
            for vuln in critical:
                report += f"‚Ä¢ {vuln['device_ip']}:{vuln['port']} - {vuln['name']}\n"
                report += f"  {vuln['description']}\n\n"
        
        if high:
            report += "üî¥ –í–´–°–û–ö–ò–ô –†–ò–°–ö:\n" 
            report += "-" * 40 + "\n"
            for vuln in high:
                report += f"‚Ä¢ {vuln['device_ip']}:{vuln['port']} - {vuln['name']}\n\n"
        
        if medium:
            report += "üü° –°–†–ï–î–ù–ò–ô –†–ò–°–ö:\n"
            report += "-" * 40 + "\n"
            for vuln in medium:
                report += f"‚Ä¢ {vuln['device_ip']}:{vuln['port']} - {vuln['name']}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report += "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(self.vulnerabilities)}\n"
        report += f"‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {len(critical)}\n"
        report += f"‚Ä¢ –í—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞: {len(high)}\n"
        report += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞: {len(medium)}\n"
        
        return report
