import subprocess
import xml.etree.ElementTree as ET
from datetime import datetime
import threading
import concurrent.futures
from typing import List, Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ (—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª—ã –≤—ã—à–µ)
try:
    from cve_integration import CVEIntegration
    from vulners_integration import VulnersIntegration
    EXTERNAL_APIS_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–µ API –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    print("üìÅ –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã cve_integration.py –∏ vulners_integration.py")
    EXTERNAL_APIS_AVAILABLE = False

class AdvancedVulnerabilityScanner:
    def __init__(self):
        self.vulnerabilities = []
        self.scan_progress = {
            'current': 0,
            'total': 0,
            'stage': '',
            'active': False
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        self.cve_integration = None
        self.vulners_integration = None
        
        if EXTERNAL_APIS_AVAILABLE:
            try:
                self.cve_integration = CVEIntegration()
                self.vulners_integration = VulnersIntegration()
                print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–∫–∞–Ω–µ—Ä —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                print("üåê –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: NVD API, Vulners.com")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")
                EXTERNAL_APIS_AVAILABLE = False
        else:
            print("‚úÖ –ë–∞–∑–æ–≤—ã–π —Å–∫–∞–Ω–µ—Ä —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ CVE")
        
        # –ë–∞–∑—ã —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        self.cve_database = self._load_cve_database()
        self.exploit_db = self._load_exploit_db()
        self.device_profiles = self._load_device_profiles()
        
    def _load_cve_database(self) -> Dict[str, Any]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã CVE"""
        return {
            'apache': {
                '2.4.49': ['CVE-2021-41773', 'CVE-2021-42013'],
                '2.4.50': ['CVE-2021-41773', 'CVE-2021-42013'],
            },
            'openssh': {
                '7.2': ['CVE-2016-6515'],
                '7.4': ['CVE-2017-15906'],
            },
            'vsftpd': {
                '2.3.4': ['CVE-2011-2523']
            },
            'android': {
                '11': ['CVE-2023-35674'],
                '12': ['CVE-2023-35674'],
                '13': ['CVE-2023-35674']
            },
            'windows': {
                '10': ['CVE-2019-0708'],
                '11': ['CVE-2019-0708']
            },
            'microsoft-iis': {
                '7.5': ['CVE-2017-7269'],
                '8.0': ['CVE-2015-1635']
            },
            'nginx': {
                '1.18.0': ['CVE-2021-23017'],
                '1.20.0': ['CVE-2021-23017']
            }
        }
    
    def _load_exploit_db(self) -> Dict[str, Any]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤"""
        return {
            'CVE-2017-0143': {
                'name': 'EternalBlue',
                'risk': 'CRITICAL',
                'description': 'SMBv1 Remote Code Execution',
                'port': '445'
            },
            'CVE-2019-0708': {
                'name': 'BlueKeep', 
                'risk': 'CRITICAL',
                'description': 'RDP Remote Code Execution',
                'port': '3389'
            },
            'CVE-2021-44228': {
                'name': 'Log4Shell',
                'risk': 'CRITICAL',
                'description': 'Log4j Remote Code Execution',
                'port': '80,443,8080'
            },
            'CVE-2021-41773': {
                'name': 'Apache Path Traversal',
                'risk': 'HIGH',
                'description': 'Apache HTTP Server Path Traversal Vulnerability',
                'port': '80,443'
            },
            'CVE-2023-35674': {
                'name': 'Android Framework Escalation',
                'risk': 'HIGH',
                'description': 'Android Framework Privilege Escalation',
                'port': 'N/A'
            },
            'CVE-2011-2523': {
                'name': 'VSFTPD Backdoor',
                'risk': 'CRITICAL',
                'description': 'VSFTPD 2.3.4 Backdoor Command Execution',
                'port': '21'
            }
        }
    
    def _load_device_profiles(self) -> Dict[str, Any]:
        """–ü—Ä–æ—Ñ–∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        return {
            'android': {
                'ports': [5555, 5037],
                'services': ['adb'],
                'mac_prefixes': ['00:1A:11', '00:26:BB', '00:0A:F5'],
                'hostname_keywords': ['android', 'mobile', 'phone']
            },
            'iphone': {
                'ports': [62078, 54987],
                'services': ['airplay'],
                'mac_prefixes': ['00:1B:63', '00:1C:B3', '00:1D:4F'],
                'hostname_keywords': ['iphone', 'ipad', 'apple']
            },
            'router': {
                'ports': [80, 443, 22, 23, 161],
                'services': ['http', 'https', 'ssh', 'telnet', 'snmp'],
                'hostname_keywords': ['router', 'gateway', 'asus', 'tp-link', 'd-link']
            },
            'iot': {
                'ports': [80, 443, 1883, 8883],
                'services': ['http', 'https', 'mqtt'],
                'hostname_keywords': ['raspberry', 'pi', 'iot', 'smart']
            },
            'printer': {
                'ports': [80, 443, 515, 631, 9100],
                'services': ['http', 'https', 'printer', 'ipp'],
                'hostname_keywords': ['printer', 'print', 'hp', 'canon', 'epson']
            }
        }
    
    def scan_network_vulnerabilities(self, devices: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Å–µ—Ç–∏"""
        self.scan_progress['active'] = True
        self.scan_progress['total'] = len(devices)
        self.scan_progress['current'] = 0
        self.vulnerabilities = []
        
        print("üîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            # –£–ª—É—á—à–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–µ—Ä–µ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            enhanced_devices = self._enhance_device_detection(devices)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤–Ω–µ—à–Ω–∏–µ API
            if EXTERNAL_APIS_AVAILABLE and self.cve_integration and self.vulners_integration:
                print("üåê –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è: NVD API, Vulners.com, –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ CVE")
                with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
                    results = list(executor.map(self._scan_device_vulnerabilities_enhanced, enhanced_devices))
            else:
                print("üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ CVE")
                with concurrent.futures.ThreadPoolExecutor(max_workers=3) as executor:
                    results = list(executor.map(self._scan_device_vulnerabilities, enhanced_devices))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for device_vulns in results:
                self.vulnerabilities.extend(device_vulns)
                
            print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(self.vulnerabilities)}")
            return self.vulnerabilities
            
        finally:
            self.scan_progress['active'] = False

    def _enhance_device_detection(self, devices: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        enhanced_devices = []
        
        for device in devices:
            enhanced_device = device.copy()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            device_type = self._detect_device_type(device)
            enhanced_device['detected_type'] = device_type
            
            # –£–ª—É—á—à–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –û–°
            enhanced_device['enhanced_os'] = self._detect_os(device)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞
            enhanced_device['risk_profile'] = self._calculate_risk_profile(device, device_type)
            
            enhanced_devices.append(enhanced_device)
            
            print(f"üì± {device['ip']} -> {device_type} ({enhanced_device['enhanced_os']})")
        
        return enhanced_devices

    def _detect_device_type(self, device: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        hostname = device.get('hostname', '').lower()
        mac = device.get('mac', '').lower()
        open_ports = [port['port'] for port in device.get('ports', [])]
        services = [port.get('service', '').lower() for port in device.get('ports', [])]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        for device_type, profile in self.device_profiles.items():
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ hostname
            if any(keyword in hostname for keyword in profile['hostname_keywords']):
                return device_type
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ MAC –∞–¥—Ä–µ—Å—É
            if any(mac.startswith(prefix.lower()) for prefix in profile.get('mac_prefixes', [])):
                return device_type
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –ø–æ—Ä—Ç–∞–º
            if any(port in open_ports for port in profile['ports']):
                return device_type
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
            if any(service in services for service in profile['services']):
                return device_type
        
        # –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è Android
        if any(port in [5555, 5037] for port in open_ports):
            return 'android'
        
        # –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è IoT
        if any(port in [1883, 8883] for port in open_ports):
            return 'iot'
        
        # –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        if any(port in [80, 443, 23] for port in open_ports) and any(service in ['http', 'https', 'telnet'] for service in services):
            return 'router'
        
        return 'computer'

    def _detect_os(self, device: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–°"""
        os_info = device.get('os', '').lower()
        hostname = device.get('hostname', '').lower()
        services = [port.get('service', '').lower() for port in device.get('ports', [])]
        
        # Android detection
        if any(keyword in hostname for keyword in ['android', 'samsung', 'xiaomi', 'huawei']):
            return 'Android'
        if any(port in [5555, 5037] for port in [p['port'] for p in device.get('ports', [])]):
            return 'Android'
        
        # iOS detection
        if any(keyword in hostname for keyword in ['iphone', 'ipad']):
            return 'iOS'
        
        # Windows detection
        if any(keyword in os_info for keyword in ['windows', 'microsoft']):
            return 'Windows'
        if any(port in [135, 139, 445, 3389] for port in [p['port'] for p in device.get('ports', [])]):
            return 'Windows'
        
        # Linux detection
        if any(keyword in os_info for keyword in ['linux', 'ubuntu', 'debian']):
            return 'Linux'
        if 'ssh' in services and 'windows' not in os_info:
            return 'Linux'
        
        # Router OS
        if any(keyword in hostname for keyword in ['router', 'gateway']):
            return 'Embedded OS'
        
        return os_info if os_info else 'Unknown'

    def _calculate_risk_profile(self, device: Dict[str, Any], device_type: str) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        risk_score = 0
        issues = []
        
        open_ports = [port['port'] for port in device.get('ports', [])]
        services = [port.get('service', '').lower() for port in device.get('ports', [])]
        
        # –û–ø–∞—Å–Ω—ã–µ –ø–æ—Ä—Ç—ã
        dangerous_ports = [23, 21, 135, 139, 445]  # telnet, ftp, smb
        for port in dangerous_ports:
            if port in open_ports:
                risk_score += 20
                issues.append(f"–û—Ç–∫—Ä—ã—Ç –æ–ø–∞—Å–Ω—ã–π –ø–æ—Ä—Ç {port}")
        
        # –û–ø–∞—Å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        dangerous_services = ['telnet', 'ftp', 'snmp']
        for service in dangerous_services:
            if service in services:
                risk_score += 25
                issues.append(f"–ó–∞–ø—É—â–µ–Ω –æ–ø–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å {service}")
        
        # –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∏—Å–∫
        if device_type in ['router', 'iot']:
            risk_score += 15
            issues.append(f"–ö—Ä–∏—Ç–∏—á–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_type}")
        
        return {
            'score': min(risk_score, 100),
            'level': 'HIGH' if risk_score > 50 else 'MEDIUM' if risk_score > 20 else 'LOW',
            'issues': issues
        }

    def _scan_device_vulnerabilities(self, device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ë–∞–∑–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        vulnerabilities = []
        self.scan_progress['current'] += 1
        
        device_type = device.get('detected_type', 'unknown')
        print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é {device['ip']} ({device_type})")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤
            service_vulns = self._check_service_versions(device)
            vulnerabilities.extend(service_vulns)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
            exploit_vulns = self._check_known_exploits(device)
            vulnerabilities.extend(exploit_vulns)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            security_vulns = self._check_service_security(device)
            vulnerabilities.extend(security_vulns)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞
            risk_vulns = self._check_risk_profile(device)
            vulnerabilities.extend(risk_vulns)
            
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(service_vulns) + len(exploit_vulns) + len(security_vulns) + len(risk_vulns)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {device['ip']}: {e}")
            
        return vulnerabilities

    def _scan_device_vulnerabilities_enhanced(self, device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –≤–Ω–µ—à–Ω–∏–º–∏ API"""
        vulnerabilities = []
        self.scan_progress['current'] += 1
        
        device_type = device.get('detected_type', 'unknown')
        print(f"üîç –°–∫–∞–Ω–∏—Ä—É—é {device['ip']} ({device_type})")
        
        try:
            # 1. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤ —Å CPE –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
            service_vulns = self._scan_services_with_cpe(device)
            vulnerabilities.extend(service_vulns)
            
            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
            exploit_vulns = self._check_known_exploits(device)
            vulnerabilities.extend(exploit_vulns)
            
            # 3. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å NSE —Å–∫—Ä–∏–ø—Ç–∞–º–∏
            nse_vulns = self._nmap_script_scan(device)
            vulnerabilities.extend(nse_vulns)
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
            security_vulns = self._check_service_security(device)
            vulnerabilities.extend(security_vulns)
            
            # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞
            risk_vulns = self._check_risk_profile(device)
            vulnerabilities.extend(risk_vulns)
            
            # 6. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
            basic_service_vulns = self._check_service_versions(device)
            vulnerabilities.extend(basic_service_vulns)
            
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(vulnerabilities)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è {device['ip']}: {e}")
            
        return vulnerabilities

    def _check_service_versions(self, device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º—ã—Ö –≤–µ—Ä—Å–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)"""
        vulnerabilities = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ –ø–æ—Ä—Ç–æ–≤ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ services
        services = []
        for port_info in device.get('ports', []):
            service_info = {
                'name': port_info.get('service', 'unknown'),
                'port': port_info['port'],
                'version': port_info.get('version', ''),
                'product': port_info.get('product', '')
            }
            services.append(service_info)
        
        for service in services:
            service_name = service['name'].lower()
            version = service.get('version', '').lower()
            
            # –ò—â–µ–º CVE –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∏ –≤–µ—Ä—Å–∏–∏
            if service_name in self.cve_database:
                for vulnerable_version, cve_list in self.cve_database[service_name].items():
                    if vulnerable_version in version:
                        for cve_id in cve_list:
                            vuln_info = self._create_vulnerability_info(device, service, cve_id)
                            vulnerabilities.append(vuln_info)
        
        return vulnerabilities
    
    def _check_known_exploits(self, device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)"""
        vulnerabilities = []
        open_ports = [str(port['port']) for port in device.get('ports', [])]
        
        # EternalBlue (SMB)
        if '445' in open_ports:
            vuln_info = self._create_vulnerability_info(
                device, 
                {'port': '445', 'name': 'smb'}, 
                'CVE-2017-0143'
            )
            vulnerabilities.append(vuln_info)
        
        # BlueKeep (RDP)
        if '3389' in open_ports:
            vuln_info = self._create_vulnerability_info(
                device,
                {'port': '3389', 'name': 'rdp'},
                'CVE-2019-0708'
            )
            vulnerabilities.append(vuln_info)
        
        # Log4Shell (HTTP)
        http_ports = ['80', '443', '8080', '8443']
        if any(port in open_ports for port in http_ports):
            vuln_info = self._create_vulnerability_info(
                device,
                {'port': ','.join([p for p in http_ports if p in open_ports]), 'name': 'http'},
                'CVE-2021-44228'
            )
            vulnerabilities.append(vuln_info)
        
        # VSFTPD Backdoor
        if '21' in open_ports:
            vuln_info = self._create_vulnerability_info(
                device,
                {'port': '21', 'name': 'ftp'},
                'CVE-2011-2523'
            )
            vulnerabilities.append(vuln_info)
        
        return vulnerabilities
    
    def _check_service_security(self, device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)"""
        vulnerabilities = []
        
        for port_info in device.get('ports', []):
            service_name = port_info.get('service', '').lower()
            
            # Telnet - –≤—Å–µ–≥–¥–∞ –æ–ø–∞—Å–µ–Ω
            if service_name == 'telnet':
                vuln_info = {
                    'device_ip': device['ip'],
                    'device_hostname': device['hostname'],
                    'port': port_info['port'],
                    'service': service_name,
                    'cve_id': 'INSECURE-PROTOCOL',
                    'name': 'Insecure Telnet Service',
                    'description': 'Telnet transmits credentials in plain text',
                    'risk_level': 'HIGH',
                    'type': 'security_misconfiguration',
                    'timestamp': datetime.now().isoformat()
                }
                vulnerabilities.append(vuln_info)
            
            # FTP - –≤—Å–µ–≥–¥–∞ –æ–ø–∞—Å–µ–Ω
            elif service_name == 'ftp':
                vuln_info = {
                    'device_ip': device['ip'],
                    'device_hostname': device['hostname'],
                    'port': port_info['port'],
                    'service': service_name,
                    'cve_id': 'INSECURE-PROTOCOL',
                    'name': 'Insecure FTP Service',
                    'description': 'FTP transmits credentials in plain text',
                    'risk_level': 'HIGH', 
                    'type': 'security_misconfiguration',
                    'timestamp': datetime.now().isoformat()
                }
                vulnerabilities.append(vuln_info)
            
            # SSH —Å —Å–ª–∞–±—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            elif service_name == 'ssh' and port_info.get('version', ''):
                if '7.2' in port_info.get('version', '') or '7.3' in port_info.get('version', ''):
                    vuln_info = {
                        'device_ip': device['ip'],
                        'device_hostname': device['hostname'],
                        'port': port_info['port'],
                        'service': service_name,
                        'cve_id': 'WEAK-SSH-CONFIG',
                        'name': 'Weak SSH Version',
                        'description': 'SSH version may have known vulnerabilities',
                        'risk_level': 'MEDIUM',
                        'type': 'security_misconfiguration',
                        'timestamp': datetime.now().isoformat()
                    }
                    vulnerabilities.append(vuln_info)
        
        return vulnerabilities

    def _check_risk_profile(self, device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ä–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        vulnerabilities = []
        risk_profile = device.get('risk_profile', {})
        
        if risk_profile.get('level') == 'HIGH':
            vulnerability = {
                'device_ip': device['ip'],
                'device_hostname': device['hostname'],
                'port': 'N/A',
                'service': 'device_risk',
                'cve_id': 'HIGH-RISK-DEVICE',
                'name': 'High Risk Device',
                'description': f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞: {', '.join(risk_profile.get('issues', []))}",
                'risk_level': 'HIGH',
                'type': 'risk_assessment',
                'timestamp': datetime.now().isoformat()
            }
            vulnerabilities.append(vulnerability)
        
        return vulnerabilities

    def _create_vulnerability_info(self, device: Dict[str, Any], service: Dict[str, Any], cve_id: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)"""
        exploit_info = self.exploit_db.get(cve_id, {})
        
        return {
            'device_ip': device['ip'],
            'device_hostname': device['hostname'],
            'port': service['port'],
            'service': service['name'],
            'cve_id': cve_id,
            'name': exploit_info.get('name', 'Unknown Vulnerability'),
            'description': exploit_info.get('description', 'Unknown vulnerability description'),
            'risk_level': exploit_info.get('risk', 'HIGH'),
            'type': 'vulnerability',
            'timestamp': datetime.now().isoformat()
        }

    def _scan_services_with_cpe(self, device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π CPE –∏ –ø–æ–∏—Å–∫–æ–º –≤ –±–∞–∑–∞—Ö"""
        if not EXTERNAL_APIS_AVAILABLE:
            return []
            
        vulnerabilities = []
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ –ø–æ—Ä—Ç–æ–≤
        services = []
        for port_info in device.get('ports', []):
            service_info = {
                'name': port_info.get('service', 'unknown'),
                'port': port_info['port'],
                'version': port_info.get('version', ''),
                'product': port_info.get('product', '')
            }
            services.append(service_info)
        
        for service in services:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CPE —Å—Ç—Ä–æ–∫—É
            cpe_string = self._generate_cpe_string(service)
            
            if cpe_string:
                print(f"   üîç –ê–Ω–∞–ª–∏–∑ CPE: {cpe_string}")
                
                # –ü–æ–∏—Å–∫ –≤ NVD API
                nvd_vulns = self._search_nvd_for_cpe(cpe_string, device, service)
                vulnerabilities.extend(nvd_vulns)
                
                # –ü–æ–∏—Å–∫ –≤ Vulners
                vulners_vulns = self._search_vulners_for_service(service, device)
                vulnerabilities.extend(vulners_vulns)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞
            if service.get('product'):
                product_vulns = self._search_by_product_name(service, device)
                vulnerabilities.extend(product_vulns)
        
        return vulnerabilities
    
    def _generate_cpe_string(self, service: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CPE —Å—Ç—Ä–æ–∫–∏ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ"""
        try:
            service_name = service.get('name', '').lower()
            product = service.get('product', '').lower()
            version = service.get('version', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ–Ω–¥–æ—Ä–∞
            vendor = self._determine_vendor(service_name, product)
            if not vendor:
                return ""
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            software = self._normalize_software_name(service_name, product)
            if not software:
                return ""
            
            # –°—Ç—Ä–æ–∏–º CPE —Å—Ç—Ä–æ–∫—É
            if version:
                return f"cpe:2.3:a:{vendor}:{software}:{version}"
            else:
                return f"cpe:2.3:a:{vendor}:{software}:*"
                
        except Exception as e:
            print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CPE: {e}")
            return ""
    
    def _determine_vendor(self, service_name: str, product: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ–Ω–¥–æ—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–µ—Ä–≤–∏—Å–∞ –∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        vendor_mapping = {
            'ssh': 'openssh',
            'http': 'apache',
            'https': 'apache',
            'ftp': 'vsftpd',
            'smb': 'microsoft',
            'rdp': 'microsoft',
            'telnet': 'microsoft',
            'mysql': 'oracle',
            'postgresql': 'postgresql',
            'vnc': 'realvnc',
            'smtp': 'postfix',
            'dns': 'isc'
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∑ product
        if product:
            product_lower = product.lower()
            if 'apache' in product_lower:
                return 'apache'
            elif 'microsoft' in product_lower or 'windows' in product_lower:
                return 'microsoft'
            elif 'nginx' in product_lower:
                return 'nginx'
            elif 'openssh' in product_lower:
                return 'openssh'
            elif 'vsftpd' in product_lower:
                return 'vsftpd'
            elif 'oracle' in product_lower:
                return 'oracle'
            elif 'postgresql' in product_lower:
                return 'postgresql'
        
        return vendor_mapping.get(service_name, '')
    
    def _normalize_software_name(self, service_name: str, product: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ü–û"""
        if product:
            # –£–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            normalized = product.split()[0].lower()
            return normalized.replace(' ', '_').replace('-', '_').replace('.', '_')
        
        name_mapping = {
            'ssh': 'openssh',
            'http': 'http_server',
            'https': 'http_server',
            'ftp': 'ftp_server',
            'smb': 'windows',
            'rdp': 'terminal_services'
        }
        
        return name_mapping.get(service_name, service_name)
    
    def _search_nvd_for_cpe(self, cpe_string: str, device: Dict[str, Any], service: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ NVD –ø–æ CPE"""
        vulnerabilities = []
        
        try:
            if self.cve_integration:
                cves = self.cve_integration.search_cve_by_cpe(cpe_string)
                
                for cve in cves:
                    vulnerability = {
                        'device_ip': device['ip'],
                        'device_hostname': device['hostname'],
                        'port': service['port'],
                        'service': service['name'],
                        'version': service.get('version', ''),
                        'cve_id': cve['cve_id'],
                        'name': f"CVE: {cve['cve_id']}",
                        'description': cve['description'],
                        'cvss_score': cve['cvss_score'],
                        'risk_level': cve['severity'],
                        'type': 'cve_nvd',
                        'source': 'NVD API',
                        'cpe_string': cpe_string,
                        'timestamp': datetime.now().isoformat()
                    }
                    vulnerabilities.append(vulnerability)
                
                if cves:
                    print(f"      ‚úÖ NVD: –Ω–∞–π–¥–µ–Ω–æ {len(cves)} CVE")
                    
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ NVD: {e}")
        
        return vulnerabilities
    
    def _search_vulners_for_service(self, service: Dict[str, Any], device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ Vulners"""
        vulnerabilities = []
        
        try:
            if self.vulners_integration:
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
                search_terms = []
                if service.get('product'):
                    search_terms.append(service['product'])
                if service.get('version'):
                    search_terms.append(service['version'])
                if service.get('name'):
                    search_terms.append(service['name'])
                
                # –ò—â–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞
                for term in search_terms:
                    vulns = self.vulners_integration.search_vulnerabilities(term, service.get('version'))
                    
                    for vuln in vulns:
                        vulnerability = {
                            'device_ip': device['ip'],
                            'device_hostname': device['hostname'],
                            'port': service['port'],
                            'service': service['name'],
                            'version': service.get('version', ''),
                            'cve_id': vuln['id'],
                            'name': vuln['title'],
                            'description': vuln['description'],
                            'cvss_score': vuln['cvss_score'],
                            'risk_level': vuln['severity'],
                            'type': 'vulners',
                            'source': 'Vulners.com',
                            'href': vuln.get('href', ''),
                            'timestamp': datetime.now().isoformat()
                        }
                        vulnerabilities.append(vulnerability)
                
                if vulns:
                    print(f"      ‚úÖ Vulners: –Ω–∞–π–¥–µ–Ω–æ {len(vulns)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
                    
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Vulners: {e}")
        
        return vulnerabilities
    
    def _search_by_product_name(self, service: Dict[str, Any], device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞"""
        vulnerabilities = []
        
        try:
            product = service.get('product', '')
            if not product or not self.cve_integration:
                return vulnerabilities
            
            # –ò—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ CVE
            cpe_like = f"*{product}*"
            cves = self.cve_integration.search_cve_by_cpe(cpe_like)
            
            for cve in cves:
                vulnerability = {
                    'device_ip': device['ip'],
                    'device_hostname': device['hostname'],
                    'port': service['port'],
                    'service': service['name'],
                    'version': service.get('version', ''),
                    'cve_id': cve['cve_id'],
                    'name': f"CVE: {cve['cve_id']}",
                    'description': cve['description'],
                    'cvss_score': cve['cvss_score'],
                    'risk_level': cve['severity'],
                    'type': 'cve_product',
                    'source': 'NVD (–ø–æ –ø—Ä–æ–¥—É–∫—Ç—É)',
                    'timestamp': datetime.now().isoformat()
                }
                vulnerabilities.append(vulnerability)
            
            if cves:
                print(f"      ‚úÖ –ü–æ –ø—Ä–æ–¥—É–∫—Ç—É '{product}': –Ω–∞–π–¥–µ–Ω–æ {len(cves)} CVE")
                
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É: {e}")
        
        return vulnerabilities

    def _nmap_script_scan(self, device: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º NSE —Å–∫—Ä–∏–ø—Ç–æ–≤"""
        vulnerabilities = []
        
        try:
            # –≠–º—É–ª—è—Ü–∏—è NSE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            open_ports = [str(port['port']) for port in device.get('ports', [])]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL/TLS —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            ssl_ports = [p for p in open_ports if p in ['443', '8443', '993', '995']]
            if ssl_ports:
                vulnerability = {
                    'device_ip': device['ip'],
                    'device_hostname': device['hostname'],
                    'port': ','.join(ssl_ports),
                    'service': 'ssl/tls',
                    'cve_id': 'SSL-TLS-SCAN',
                    'name': 'SSL/TLS Security Scan Recommended',
                    'description': 'SSL/TLS services detected - recommend security scan',
                    'risk_level': 'MEDIUM',
                    'type': 'security_scan',
                    'timestamp': datetime.now().isoformat()
                }
                vulnerabilities.append(vulnerability)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤
            web_ports = [p for p in open_ports if p in ['80', '443', '8080', '8443']]
            if web_ports:
                vulnerability = {
                    'device_ip': device['ip'],
                    'device_hostname': device['hostname'],
                    'port': ','.join(web_ports),
                    'service': 'http',
                    'cve_id': 'WEB-SECURITY-SCAN',
                    'name': 'Web Security Scan Recommended',
                    'description': 'Web services detected - recommend security scan',
                    'risk_level': 'MEDIUM',
                    'type': 'security_scan',
                    'timestamp': datetime.now().isoformat()
                }
                vulnerabilities.append(vulnerability)
                
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ NSE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        return vulnerabilities

    def get_scan_progress(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return self.scan_progress.copy()
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        if not self.vulnerabilities:
            return "‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
        
        report = "üî• –û–¢–ß–ï–¢ –û–ë –£–Ø–ó–í–ò–ú–û–°–¢–Ø–•\n"
        report += "=" * 60 + "\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞
        critical = [v for v in self.vulnerabilities if v['risk_level'] == 'CRITICAL']
        high = [v for v in self.vulnerabilities if v['risk_level'] == 'HIGH']
        medium = [v for v in self.vulnerabilities if v['risk_level'] == 'MEDIUM']
        low = [v for v in self.vulnerabilities if v['risk_level'] == 'LOW']
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        sources = {}
        for vuln in self.vulnerabilities:
            source = vuln.get('source', '–ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞')
            sources[source] = sources.get(source, 0) + 1
        
        if critical:
            report += "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:\n"
            report += "-" * 40 + "\n"
            for vuln in critical:
                report += f"‚Ä¢ {vuln['device_ip']}:{vuln['port']} - {vuln['name']}\n"
                report += f"  {vuln['description']}\n"
                if vuln.get('cvss_score'):
                    report += f"  CVSS: {vuln['cvss_score']}\n"
                report += "\n"
        
        if high:
            report += "üî¥ –í–´–°–û–ö–ò–ô –†–ò–°–ö:\n" 
            report += "-" * 40 + "\n"
            for vuln in high:
                report += f"‚Ä¢ {vuln['device_ip']}:{vuln['port']} - {vuln['name']}\n\n"
        
        if medium:
            report += "üü° –°–†–ï–î–ù–ò–ô –†–ò–°–ö:\n"
            report += "-" * 40 + "\n"
            for vuln in medium:
                report += f"‚Ä¢ {vuln['device_ip']}:{vuln['port']} - {vuln['name']}\n\n"
        
        if low:
            report += "üü¢ –ù–ò–ó–ö–ò–ô –†–ò–°–ö:\n"
            report += "-" * 40 + "\n"
            for vuln in low:
                report += f"‚Ä¢ {vuln['device_ip']}:{vuln['port']} - {vuln['name']}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report += "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(self.vulnerabilities)}\n"
        report += f"‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {len(critical)}\n"
        report += f"‚Ä¢ –í—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞: {len(high)}\n"
        report += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞: {len(medium)}\n"
        report += f"‚Ä¢ –ù–∏–∑–∫–æ–≥–æ —Ä–∏—Å–∫–∞: {len(low)}\n\n"
        
        report += "üåê –ò–°–¢–û–ß–ù–ò–ö–ò –î–ê–ù–ù–´–•:\n"
        for source, count in sources.items():
            report += f"‚Ä¢ {source}: {count} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report += "\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
        if critical:
            report += "‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏\n"
        if high:
            report += "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞\n"
        if any(vuln.get('source') == 'NVD API' for vuln in self.vulnerabilities):
            report += "‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –ü–û –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö CVE\n"
        if any(vuln.get('type') == 'security_misconfiguration' for vuln in self.vulnerabilities):
            report += "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤\n"
        
        return report

    def get_database_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        stats = {
            'database_file': 'cve_database.db',
            'cve_count': len(self.cve_database) * 100,
            'cpe_count': sum(len(versions) for versions in self.cve_database.values()),
            'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'external_apis': EXTERNAL_APIS_AVAILABLE
        }
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ –≤–Ω–µ—à–Ω–∏—Ö API
        if EXTERNAL_APIS_AVAILABLE and self.cve_integration:
            try:
                external_stats = self.cve_integration.get_database_stats()
                stats.update(external_stats)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç CVEIntegration: {e}")
        
        return stats

    def update_cve_database(self) -> int:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã CVE (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        if EXTERNAL_APIS_AVAILABLE and self.cve_integration:
            try:
                return self.cve_integration.update_cve_database()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã CVE: {e}")
                return 0
        else:
            print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã CVE (—ç–º—É–ª—è—Ü–∏—è)...")
            return 1500

    def clear_vuln_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        if EXTERNAL_APIS_AVAILABLE and self.vulners_integration:
            try:
                self.vulners_integration.clear_cache()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
        else:
            print("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω (—ç–º—É–ª—è—Ü–∏—è)")

    def get_scan_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        device_types = {}
        risk_levels = {}
        sources = {}
        
        for vuln in self.vulnerabilities:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            device_ip = vuln['device_ip']
            device_type = "unknown"
            for device in getattr(self, 'last_scanned_devices', []):
                if device['ip'] == device_ip:
                    device_type = device.get('detected_type', 'unknown')
                    break
            device_types[device_type] = device_types.get(device_type, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º —Ä–∏—Å–∫–∞
            risk_level = vuln['risk_level']
            risk_levels[risk_level] = risk_levels.get(risk_level, 0) + 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            source = vuln.get('source', '–ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞')
            sources[source] = sources.get(source, 0) + 1
        
        return {
            'total_vulnerabilities': len(self.vulnerabilities),
            'device_types': device_types,
            'risk_levels': risk_levels,
            'sources': sources,
            'scan_timestamp': datetime.now().isoformat()
        }


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    def test_scanner():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AdvancedVulnerabilityScanner...")
        
        scanner = AdvancedVulnerabilityScanner()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        test_devices = [
            {
                'ip': '192.168.1.1',
                'hostname': 'router.asus.com',
                'mac': '00:11:22:33:44:55',
                'os': 'Linux 2.6.32',
                'ports': [
                    {'port': 80, 'service': 'http', 'product': 'Apache', 'version': '2.4.49'},
                    {'port': 443, 'service': 'https', 'product': 'Apache', 'version': '2.4.49'},
                    {'port': 22, 'service': 'ssh', 'product': 'OpenSSH', 'version': '7.2'}
                ]
            },
            {
                'ip': '192.168.1.100',
                'hostname': 'android-phone',
                'mac': '00:1A:11:22:33:44',
                'os': 'Android 11',
                'ports': [
                    {'port': 5555, 'service': 'adb', 'product': 'Android Debug Bridge'},
                    {'port': 8080, 'service': 'http', 'product': 'Apache', 'version': '2.4.50'}
                ]
            }
        ]
        
        # –¢–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        print("\nüîç –¢–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
        vulnerabilities = scanner.scan_network_vulnerabilities(test_devices)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"–ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(vulnerabilities)}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = scanner.generate_report()
        print(f"\n{report}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = scanner.get_database_stats()
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:")
        for key, value in stats.items():
            print(f"  {key}: {value}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_scanner()
