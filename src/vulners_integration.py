import requests
import json
import time
from typing import List, Dict, Any

class VulnersIntegration:
    def __init__(self, api_key=None):
        self.api_key = api_key
        self.base_url = "https://vulners.com/api/v3"
        self.local_cache = {}
        self.request_delay = 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
        self.test_vulnerabilities = {
            'apache': [
                {
                    'id': 'CVE-2021-41773',
                    'title': 'Apache Path Traversal',
                    'description': 'Path traversal vulnerability in Apache HTTP Server 2.4.49',
                    'cvss_score': 7.5,
                    'severity': 'HIGH',
                    'published': '2021-10-05',
                    'type': 'cve',
                    'bulletinFamily': 'NVD',
                    'href': 'https://nvd.nist.gov/vuln/detail/CVE-2021-41773',
                    'cvelist': ['CVE-2021-41773'],
                    'source': 'vulners_fallback'
                },
                {
                    'id': 'CVE-2021-42013',
                    'title': 'Apache Path Traversal RCE',
                    'description': 'Path traversal and remote code execution in Apache HTTP Server 2.4.50',
                    'cvss_score': 9.8,
                    'severity': 'CRITICAL',
                    'published': '2021-10-07',
                    'type': 'cve',
                    'bulletinFamily': 'NVD',
                    'href': 'https://nvd.nist.gov/vuln/detail/CVE-2021-42013',
                    'cvelist': ['CVE-2021-42013'],
                    'source': 'vulners_fallback'
                }
            ],
            'openssh': [
                {
                    'id': 'CVE-2016-6515',
                    'title': 'OpenSSH Denial of Service',
                    'description': 'Buffer overflow in OpenSSH before 7.3',
                    'cvss_score': 7.5,
                    'severity': 'HIGH',
                    'published': '2016-08-07',
                    'type': 'cve',
                    'bulletinFamily': 'NVD',
                    'href': 'https://nvd.nist.gov/vuln/detail/CVE-2016-6515',
                    'cvelist': ['CVE-2016-6515'],
                    'source': 'vulners_fallback'
                },
                {
                    'id': 'CVE-2017-15906',
                    'title': 'OpenSSH Memory Corruption',
                    'description': 'Memory corruption in OpenSSH before 7.6',
                    'cvss_score': 8.1,
                    'severity': 'HIGH',
                    'published': '2017-10-26',
                    'type': 'cve',
                    'bulletinFamily': 'NVD',
                    'href': 'https://nvd.nist.gov/vuln/detail/CVE-2017-15906',
                    'cvelist': ['CVE-2017-15906'],
                    'source': 'vulners_fallback'
                }
            ],
            'android': [
                {
                    'id': 'CVE-2023-35674',
                    'title': 'Android Framework Privilege Escalation',
                    'description': 'Privilege escalation vulnerability in Android Framework',
                    'cvss_score': 8.8,
                    'severity': 'HIGH',
                    'published': '2023-12-06',
                    'type': 'cve',
                    'bulletinFamily': 'NVD',
                    'href': 'https://nvd.nist.gov/vuln/detail/CVE-2023-35674',
                    'cvelist': ['CVE-2023-35674'],
                    'source': 'vulners_fallback'
                }
            ],
            'windows': [
                {
                    'id': 'CVE-2019-0708',
                    'title': 'BlueKeep RDP Vulnerability',
                    'description': 'Remote Desktop Services Remote Code Execution Vulnerability',
                    'cvss_score': 9.8,
                    'severity': 'CRITICAL',
                    'published': '2019-05-14',
                    'type': 'cve',
                    'bulletinFamily': 'NVD',
                    'href': 'https://nvd.nist.gov/vuln/detail/CVE-2019-0708',
                    'cvelist': ['CVE-2019-0708'],
                    'source': 'vulners_fallback'
                }
            ],
            'microsoft': [
                {
                    'id': 'CVE-2017-0143',
                    'title': 'EternalBlue SMB Vulnerability',
                    'description': 'Windows SMBv1 Remote Code Execution Vulnerability',
                    'cvss_score': 9.3,
                    'severity': 'CRITICAL',
                    'published': '2017-03-14',
                    'type': 'cve',
                    'bulletinFamily': 'NVD',
                    'href': 'https://nvd.nist.gov/vuln/detail/CVE-2017-0143',
                    'cvelist': ['CVE-2017-0143'],
                    'source': 'vulners_fallback'
                }
            ],
            'nginx': [
                {
                    'id': 'CVE-2021-23017',
                    'title': 'NGINX DNS Resolver Vulnerability',
                    'description': 'DNS resolver vulnerability in NGINX before 1.20.1',
                    'cvss_score': 7.5,
                    'severity': 'HIGH',
                    'published': '2021-05-25',
                    'type': 'cve',
                    'bulletinFamily': 'NVD',
                    'href': 'https://nvd.nist.gov/vuln/detail/CVE-2021-23017',
                    'cvelist': ['CVE-2021-23017'],
                    'source': 'vulners_fallback'
                }
            ],
            'vsftpd': [
                {
                    'id': 'CVE-2011-2523',
                    'title': 'VSFTPD Backdoor Vulnerability',
                    'description': 'Backdoor command execution in VSFTPD version 2.3.4',
                    'cvss_score': 9.3,
                    'severity': 'CRITICAL',
                    'published': '2011-07-05',
                    'type': 'cve',
                    'bulletinFamily': 'NVD',
                    'href': 'https://nvd.nist.gov/vuln/detail/CVE-2011-2523',
                    'cvelist': ['CVE-2011-2523'],
                    'source': 'vulners_fallback'
                }
            ],
            'proftpd': [
                {
                    'id': 'CVE-2015-3456',
                    'title': 'ProFTPD Mod_copy Vulnerability',
                    'description': 'Remote code execution in ProFTPD with mod_copy',
                    'cvss_score': 9.8,
                    'severity': 'CRITICAL',
                    'published': '2015-05-13',
                    'type': 'cve',
                    'bulletinFamily': 'NVD',
                    'href': 'https://nvd.nist.gov/vuln/detail/CVE-2015-3456',
                    'cvelist': ['CVE-2015-3456'],
                    'source': 'vulners_fallback'
                }
            ]
        }
        
        print("‚úÖ VulnersIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def search_vulnerabilities(self, software_name: str, version: str = None) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è"""
        print(f"üîç Vulners: –ø–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è {software_name} {version if version else ''}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{software_name}_{version}" if version else software_name
        if cache_key in self.local_cache:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: {len(self.local_cache[cache_key])} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            return self.local_cache[cache_key]
        
        # –ü—Ä–æ–±—É–µ–º API Vulners
        api_results = self._search_vulners_api(software_name, version)
        if api_results:
            self.local_cache[cache_key] = api_results
            return api_results
        
        # Fallback –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        fallback_results = self._get_fallback_vulnerabilities(software_name, version)
        if fallback_results:
            self.local_cache[cache_key] = fallback_results
            return fallback_results
        
        print(f"‚ö†Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {software_name}")
        return []
    
    def _search_vulners_api(self, software_name: str, version: str = None) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Vulners API"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            search_query = software_name.lower()
            if version:
                search_query += f" {version}"
            
            print(f"üåê –ó–∞–ø—Ä–æ—Å –∫ Vulners API: {search_query}")
            
            # –≠–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω API –∫–ª—é—á)
            time.sleep(self.request_delay)
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
            # headers = {'User-Agent': 'NetworkScanner/2.0'}
            # params = {'apiKey': self.api_key, 'query': search_query}
            # response = requests.get(f"{self.base_url}/search/lucene", headers=headers, params=params)
            
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –≤—ã—à–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞
            
            return []
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Vulners API: {e}")
            return []
    
    def _get_fallback_vulnerabilities(self, software_name: str, version: str = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        software_lower = software_name.lower()
        
        # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        for keyword, vulnerabilities in self.test_vulnerabilities.items():
            if keyword in software_lower:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(vulnerabilities)}")
                return vulnerabilities
        
        # –û–±—â–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ü–û
        general_vulns = [
            {
                'id': 'CVE-2021-44228',
                'title': 'Log4Shell Remote Code Execution',
                'description': 'Apache Log4j2 Remote Code Execution Vulnerability',
                'cvss_score': 10.0,
                'severity': 'CRITICAL',
                'published': '2021-12-09',
                'type': 'cve',
                'bulletinFamily': 'NVD',
                'href': 'https://nvd.nist.gov/vuln/detail/CVE-2021-44228',
                'cvelist': ['CVE-2021-44228'],
                'source': 'vulners_fallback'
            },
            {
                'id': 'CVE-2022-22965',
                'title': 'Spring4Shell Remote Code Execution',
                'description': 'Spring Framework Remote Code Execution via Data Binding',
                'cvss_score': 9.8,
                'severity': 'CRITICAL',
                'published': '2022-03-31',
                'type': 'cve',
                'bulletinFamily': 'NVD',
                'href': 'https://nvd.nist.gov/vuln/detail/CVE-2022-22965',
                'cvelist': ['CVE-2022-22965'],
                'source': 'vulners_fallback'
            }
        ]
        
        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏: {len(general_vulns)}")
        return general_vulns
    
    def get_software_suggestions(self, banner: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π –æ –ü–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–Ω–Ω–µ—Ä–∞"""
        suggestions = []
        banner_lower = banner.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ü–û –ø–æ –±–∞–Ω–Ω–µ—Ä—É
        software_patterns = {
            'apache': ['apache', 'httpd'],
            'nginx': ['nginx'],
            'iis': ['microsoft-iis', 'iis'],
            'openssh': ['openssh', 'ssh-2.0'],
            'vsftpd': ['vsftpd'],
            'proftpd': ['proftpd'],
            'mysql': ['mysql'],
            'postgresql': ['postgresql'],
            'tomcat': ['apache-tomcat', 'tomcat'],
            'wordpress': ['wordpress'],
            'joomla': ['joomla'],
            'drupal': ['drupal']
        }
        
        for software, patterns in software_patterns.items():
            for pattern in patterns:
                if pattern in banner_lower:
                    suggestions.append(software)
                    break
        
        return suggestions if suggestions else ['unknown']
    
    def get_vulnerability_stats(self, vulnerabilities: List[Dict]) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—è–∑–≤–∏–º–æ—Å—Ç—è–º"""
        stats = {
            'total': len(vulnerabilities),
            'critical': 0,
            'high': 0,
            'medium': 0,
            'low': 0,
            'unknown': 0,
            'max_cvss': 0.0,
            'average_cvss': 0.0
        }
        
        total_score = 0.0
        scored_vulns = 0
        
        for vuln in vulnerabilities:
            score = vuln.get('cvss_score', 0)
            severity = vuln.get('severity', 'UNKNOWN').upper()
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ severity
            if severity == 'CRITICAL':
                stats['critical'] += 1
            elif severity == 'HIGH':
                stats['high'] += 1
            elif severity == 'MEDIUM':
                stats['medium'] += 1
            elif severity == 'LOW':
                stats['low'] += 1
            else:
                stats['unknown'] += 1
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CVSS
            if score > 0:
                stats['max_cvss'] = max(stats['max_cvss'], score)
                total_score += score
                scored_vulns += 1
        
        # –°—Ä–µ–¥–Ω–∏–π CVSS
        if scored_vulns > 0:
            stats['average_cvss'] = round(total_score / scored_vulns, 1)
        
        return stats
    
    def filter_vulnerabilities(self, vulnerabilities: List[Dict], 
                             min_severity: str = None, 
                             min_cvss: float = None) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ severity –∏ CVSS"""
        filtered = vulnerabilities
        
        if min_severity:
            severity_order = {'LOW': 1, 'MEDIUM': 2, 'HIGH': 3, 'CRITICAL': 4}
            min_level = severity_order.get(min_severity.upper(), 0)
            
            filtered = [v for v in filtered 
                       if severity_order.get(v.get('severity', '').upper(), 0) >= min_level]
        
        if min_cvss is not None:
            filtered = [v for v in filtered 
                       if v.get('cvss_score', 0) >= min_cvss]
        
        return filtered
    
    def get_exploit_info(self, vulnerability_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–ª–æ–π—Ç–∞—Ö –¥–ª—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —ç–∫—Å–ø–ª–æ–π—Ç–∞—Ö
        exploit_db = {
            'CVE-2021-41773': {
                'exploits': [
                    {
                        'title': 'Apache 2.4.49 Path Traversal Exploit',
                        'type': 'remote',
                        'platform': 'linux',
                        'port': 80,
                        'difficulty': 'easy',
                        'reliability': 'high',
                        'source': 'exploit_db'
                    }
                ],
                'metasploit_modules': [
                    'auxiliary/scanner/http/apache_normalize_path'
                ]
            },
            'CVE-2019-0708': {
                'exploits': [
                    {
                        'title': 'BlueKeep RDP Exploit',
                        'type': 'remote',
                        'platform': 'windows',
                        'port': 3389,
                        'difficulty': 'hard',
                        'reliability': 'medium',
                        'source': 'exploit_db'
                    }
                ],
                'metasploit_modules': [
                    'exploit/windows/rdp/cve_2019_0708_bluekeep_rce'
                ]
            },
            'CVE-2017-0143': {
                'exploits': [
                    {
                        'title': 'EternalBlue SMB Exploit',
                        'type': 'remote',
                        'platform': 'windows',
                        'port': 445,
                        'difficulty': 'medium',
                        'reliability': 'high',
                        'source': 'exploit_db'
                    }
                ],
                'metasploit_modules': [
                    'exploit/windows/smb/ms17_010_eternalblue'
                ]
            }
        }
        
        return exploit_db.get(vulnerability_id, {
            'exploits': [],
            'metasploit_modules': []
        })
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        self.local_cache.clear()
        print("‚úÖ –ö—ç—à Vulners –æ—á–∏—â–µ–Ω")


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
if __name__ == "__main__":
    def test_vulners_integration():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VulnersIntegration"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VulnersIntegration...")
        
        vulners = VulnersIntegration()
        
        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        test_software = [
            ("Apache HTTP Server", "2.4.49"),
            ("OpenSSH", "7.4"),
            ("VSFTPD", "2.3.4"),
            ("Unknown Software", "1.0")
        ]
        
        for software, version in test_software:
            print(f"\nüîç –¢–µ—Å—Ç –¥–ª—è {software} {version}:")
            vulnerabilities = vulners.search_vulnerabilities(software, version)
            
            if vulnerabilities:
                stats = vulners.get_vulnerability_stats(vulnerabilities)
                print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total']} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
                print(f"   üéØ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ: {stats['critical']}, –í—ã—Å–æ–∫–∏–µ: {stats['high']}")
                print(f"   üìà Max CVSS: {stats['max_cvss']}, –°—Ä–µ–¥–Ω–∏–π: {stats['average_cvss']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 —É—è–∑–≤–∏–º–æ—Å—Ç–∏
                for i, vuln in enumerate(vulnerabilities[:3]):
                    print(f"   {i+1}. {vuln['id']}: {vuln['severity']} ({vuln['cvss_score']}) - {vuln['title']}")
            else:
                print("   ‚ö†Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        print("\nüéõÔ∏è –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
        all_vulns = vulners.search_vulnerabilities("apache")
        filtered = vulners.filter_vulnerabilities(all_vulns, min_severity="HIGH", min_cvss=7.0)
        print(f"   –í—Å–µ–≥–æ: {len(all_vulns)}, –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞: {len(filtered)}")
        
        # –¢–µ—Å—Ç —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤
        print("\nüí• –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫—Å–ø–ª–æ–π—Ç–∞—Ö:")
        test_cves = ['CVE-2021-41773', 'CVE-2019-0708', 'CVE-2017-0143']
        for cve in test_cves:
            exploit_info = vulners.get_exploit_info(cve)
            print(f"   {cve}: {len(exploit_info['exploits'])} —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤, {len(exploit_info['metasploit_modules'])} –º–æ–¥—É–ª–µ–π Metasploit")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_vulners_integration()
