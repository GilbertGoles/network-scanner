import requests
import json
import time
from typing import List, Dict, Any

class VulnersIntegration:
    def __init__(self, api_key=None):
        self.api_key = api_key
        self.base_url = "https://vulners.com/api/v3"
        self.local_cache = {}
        self.request_delay = 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    def search_vulnerabilities(self, software_name: str, version: str = None) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Vulners API"""
        cache_key = f"{software_name}_{version if version else 'no_version'}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in self.local_cache:
            return self.local_cache[cache_key]
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query = self._build_search_query(software_name, version)
            
            headers = {
                'Content-Type': 'application/json',
                'User-Agent': 'NetworkSecurityScanner/2.0'
            }
            
            if self.api_key:
                headers['X-Vulners-Api-Key'] = self.api_key
            
            payload = {
                "query": query,
                "size": 15,
                "sort": "published",
                "order": "desc"
            }
            
            print(f"üåê –ó–∞–ø—Ä–æ—Å –∫ Vulners API: {query}")
            response = requests.post(
                f"{self.base_url}/search/lucene/",
                headers=headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                results = self._parse_vulners_response(response.json())
                self.local_cache[cache_key] = results
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
                time.sleep(self.request_delay)
                
                return results
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ Vulners API: {response.status_code}")
                if response.status_code == 429:
                    print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É...")
                    self.request_delay = 5
                
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Vulners API: {e}")
            return []
    
    def _build_search_query(self, software_name: str, version: str = None) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        software_name = software_name.replace('"', '\\"')
        
        if version:
            version = version.replace('"', '\\"')
            return f'"{software_name}" {version}'
        
        return f'"{software_name}"'
    
    def _parse_vulners_response(self, data: Dict) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ Vulners"""
        vulnerabilities = []
        
        try:
            hits = data.get('data', {}).get('search', [])
            
            for hit in hits:
                vuln_id = hit.get('_id', '')
                source = hit.get('_source', {})
                
                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                title = source.get('title', '')
                description = source.get('description', '')
                
                # CVSS –æ—Ü–µ–Ω–∫–∞
                cvss_info = source.get('cvss', {})
                cvss_score = cvss_info.get('score', 0.0)
                
                # –°–ø–∏—Å–æ–∫ CVE
                cvelist = source.get('cvelist', [])
                
                vulnerability = {
                    'id': vuln_id,
                    'title': title,
                    'description': description[:500] + '...' if len(description) > 500 else description,
                    'cvss_score': cvss_score,
                    'severity': self._calculate_severity(cvss_score),
                    'published': source.get('published', ''),
                    'type': source.get('type', ''),
                    'bulletinFamily': source.get('bulletinFamily', ''),
                    'href': source.get('href', ''),
                    'cvelist': cvelist,
                    'source': 'vulners'
                }
                
                vulnerabilities.append(vulnerability)
            
            print(f"‚úÖ Vulners: –Ω–∞–π–¥–µ–Ω–æ {len(vulnerabilities)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Vulners: {e}")
        
        return vulnerabilities
    
    def _calculate_severity(self, cvss_score: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –ø–æ CVSS"""
        if cvss_score >= 9.0:
            return 'CRITICAL'
        elif cvss_score >= 7.0:
            return 'HIGH'
        elif cvss_score >= 4.0:
            return 'MEDIUM'
        elif cvss_score > 0:
            return 'LOW'
        else:
            return 'UNKNOWN'
    
    def get_software_vulnerabilities(self, software_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è"""
        vulnerabilities = []
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_attempts = []
        
        if software_data.get('product'):
            search_attempts.append(software_data['product'])
        
        if software_data.get('service_name'):
            search_attempts.append(software_data['service_name'])
        
        if software_data.get('version'):
            # –ü–æ–∏—Å–∫ —Å –≤–µ—Ä—Å–∏–µ–π
            for term in search_attempts:
                vulns = self.search_vulnerabilities(term, software_data['version'])
                vulnerabilities.extend(vulns)
        
        # –ü–æ–∏—Å–∫ –±–µ–∑ –≤–µ—Ä—Å–∏–∏ (–±–æ–ª–µ–µ –æ–±—â–∏–π)
        for term in search_attempts:
            vulns = self.search_vulnerabilities(term)
            vulnerabilities.extend(vulns)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        seen_ids = set()
        unique_vulnerabilities = []
        
        for vuln in vulnerabilities:
            if vuln['id'] not in seen_ids:
                seen_ids.add(vuln['id'])
                unique_vulnerabilities.append(vuln)
        
        return unique_vulnerabilities
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        self.local_cache.clear()
        print("‚úÖ –ö—ç—à Vulners –æ—á–∏—â–µ–Ω")
