import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import json
from datetime import datetime

class NetworkScannerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üåê Network Scanner v1.0")
        self.root.geometry("1400x900")
        self.root.configure(bg='#2C3E50')
        
        # –ò–º–ø–æ—Ä—Ç—ã –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from scanner import NetworkScanner
        from visualizer import NetworkVisualizer
        
        self.scanner = NetworkScanner()
        self.visualizer = NetworkVisualizer()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–∞–Ω–µ—Ä–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.vuln_scanner = None
        try:
            from vulnerability_scanner import VulnerabilityScanner
            self.vuln_scanner = VulnerabilityScanner()
        except ImportError:
            print("‚ö†Ô∏è –°–∫–∞–Ω–µ—Ä —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        self.setup_ui()
        self.scan_in_progress = False
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°—Ç–∏–ª–∏
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TFrame', background='#2C3E50')
        style.configure('TLabel', background='#2C3E50', foreground='white', font=('Arial', 10))
        style.configure('TButton', background='#34495E', foreground='white', font=('Arial', 10))
        style.configure('Treeview', background='#34495E', fieldbackground='#34495E', foreground='white')
        style.configure('Treeview.Heading', background='#2C3E50', foreground='white')
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = ttk.Label(main_frame, text="üåê Network Scanner - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä WiFi —Å–µ—Ç–µ–π", 
                                font=('Arial', 16, 'bold'))
        header_label.pack(pady=(0, 15))
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame = ttk.Frame(main_frame)
        self.control_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.scan_btn = ttk.Button(self.control_frame, text="üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å", 
                                  command=self.start_scan)
        self.scan_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.map_btn = ttk.Button(self.control_frame, text="üóÇÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É", 
                                 command=self.show_map, state=tk.DISABLED)
        self.map_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.export_btn = ttk.Button(self.control_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç JSON", 
                                    command=self.export_results, state=tk.DISABLED)
        self.export_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (–µ—Å–ª–∏ —Å–∫–∞–Ω–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω)
        if self.vuln_scanner:
            self.vuln_btn = ttk.Button(self.control_frame, text="üõ°Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏", 
                                      command=self.scan_vulnerabilities, state=tk.DISABLED)
            self.vuln_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏
        info_frame = ttk.LabelFrame(main_frame, text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏")
        info_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.info_text = scrolledtext.ScrolledText(info_frame, height=6, 
                                                  bg='#34495E', fg='white',
                                                  font=('Consolas', 9),
                                                  insertbackground='white')
        self.info_text.pack(fill=tk.X, padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–µ–º Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # –í–∫–ª–∞–¥–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices_frame = ttk.Frame(self.notebook)
        self.notebook.add(devices_frame, text="üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        columns = ('IP', 'MAC', 'Hostname', 'Vendor', 'OS', 'Status', 'Ports')
        self.devices_tree = ttk.Treeview(devices_frame, columns=columns, show='headings', height=15)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        column_widths = {'IP': 120, 'MAC': 150, 'Hostname': 150, 'Vendor': 150, 'OS': 200, 'Status': 80, 'Ports': 100}
        for col in columns:
            self.devices_tree.heading(col, text=col)
            self.devices_tree.column(col, width=column_widths.get(col, 100))
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        tree_scroll = ttk.Scrollbar(devices_frame, orient=tk.VERTICAL, command=self.devices_tree.yview)
        self.devices_tree.configure(yscrollcommand=tree_scroll.set)
        
        self.devices_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        tree_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        self.context_menu = tk.Menu(self.devices_tree, tearoff=0)
        self.context_menu.add_command(label="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å IP", command=self.copy_ip)
        self.context_menu.add_command(label="üîç –î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", command=self.show_device_details)
        self.devices_tree.bind("<Button-3>", self.show_context_menu)
        
        # –í–∫–ª–∞–¥–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (–µ—Å–ª–∏ —Å–∫–∞–Ω–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω)
        if self.vuln_scanner:
            self.vuln_frame = ttk.Frame(self.notebook)
            self.notebook.add(self.vuln_frame, text="üõ°Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç–∏")
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            self.vuln_text = scrolledtext.ScrolledText(self.vuln_frame, 
                                                      bg='#34495E', fg='white',
                                                      font=('Consolas', 9),
                                                      insertbackground='white')
            self.vuln_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é...")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, 
                              relief=tk.SUNKEN, style='TLabel')
        status_bar.pack(fill=tk.X, pady=(10, 0))
        
    def start_scan(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.scan_in_progress:
            self.scan_in_progress = True
            self._disable_buttons()
            
            threading.Thread(target=self._scan_thread, daemon=True).start()
    
    def _disable_buttons(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.scan_btn.config(state=tk.DISABLED)
        self.map_btn.config(state=tk.DISABLED)
        self.export_btn.config(state=tk.DISABLED)
        if self.vuln_scanner:
            self.vuln_btn.config(state=tk.DISABLED)
    
    def _enable_buttons(self):
        """–í–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.scan_btn.config(state=tk.NORMAL)
        self.map_btn.config(state=tk.NORMAL)
        self.export_btn.config(state=tk.NORMAL)
        if self.vuln_scanner and hasattr(self.scanner, 'devices') and self.scanner.devices:
            self.vuln_btn.config(state=tk.NORMAL)
    
    def _scan_thread(self):
        """–ü–æ—Ç–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self._update_status("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–∏...")
            self._update_info("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–∏...\n")
            
            network_info = self.scanner.get_local_network()
            if network_info:
                info_str = f"""üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏:
‚Ä¢ üñ•Ô∏è  –õ–æ–∫–∞–ª—å–Ω—ã–π IP: {network_info['local_ip']}
‚Ä¢ üö™ –®–ª—é–∑: {network_info['gateway']}
‚Ä¢ üåê –°–µ—Ç—å: {network_info['network']}
‚Ä¢ üîå –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {network_info['interface']}

"""
                self._update_info(info_str)
                self._update_status("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
                self._update_info("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...\n")
                
                devices = self.scanner.scan_network()
                self._display_devices(devices)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
                summary = self.scanner.get_network_summary()
                result_str = f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n{summary}\n"
                self._update_info(result_str)
                self._update_status("–ì–æ—Ç–æ–≤–æ")
                
            else:
                self._update_info("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ç—å\n")
                self._update_status("–û—à–∏–±–∫–∞")
                
        except Exception as e:
            self._update_info(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}\n")
            self._update_status("–û—à–∏–±–∫–∞")
        finally:
            self.scan_in_progress = False
            self._enable_buttons()
    
    def _display_devices(self, devices):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –í–°–ï–• —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.devices_tree.get_children():
            self.devices_tree.delete(item)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –í–°–ï–• —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        for device in devices:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Ä—Ç—ã
            ports_str = "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö"
            if device['ports']:
                ports_str = ", ".join([str(p['port']) for p in device['ports'][:3]])
                if len(device['ports']) > 3:
                    ports_str += f" ...(+{len(device['ports'])-3})"
            
            # –ü–æ–º–µ—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            hostname = device['hostname']
            os_info = device['os']
            if device['os'] == 'Unknown' and device['vendor'] == 'Unknown':
                hostname = f"‚è≥ {hostname}"  # –ò–∫–æ–Ω–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
                os_info = "‚è≥ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ..."
            
            self.devices_tree.insert('', tk.END, values=(
                device['ip'],
                device['mac'],
                hostname,
                device['vendor'],
                os_info,
                device['status'],
                ports_str
            ))
    
    def show_map(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É —Å–µ—Ç–∏"""
        if hasattr(self.scanner, 'devices') and self.scanner.devices:
            try:
                import matplotlib.pyplot as plt
                fig = self.visualizer.create_network_map(
                    self.scanner.devices, 
                    self.scanner.network_info
                )
                plt.show()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É: {str(e)}")
        else:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏")
    
    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if hasattr(self.scanner, 'devices') and self.scanner.devices:
            filename = f"network_scan_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            try:
                self.scanner.export_results(self.scanner.devices, filename)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {str(e)}")
        else:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏")
    
    def scan_vulnerabilities(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        if not hasattr(self.scanner, 'devices') or not self.scanner.devices:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏")
            return
        
        if not self.vuln_scanner:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–∫–∞–Ω–µ—Ä —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ —Å–∫—Ä–∏–ø—Ç—ã
        missing = self.vuln_scanner.check_scripts_installed()
        if missing:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", 
                                 f"–°–∫—Ä–∏–ø—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(missing)}\n\n"
                                 f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:\n"
                                 f"sudo apt install nmap\n"
                                 f"sudo wget -O /usr/share/nmap/scripts/vulners.nse https://raw.githubusercontent.com/vulnersCom/nmap-vulners/master/vulners.nse\n"
                                 f"sudo nmap --script-updatedb")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._vuln_scan_thread, daemon=True).start()
    
    def _vuln_scan_thread(self):
        """–ü–æ—Ç–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        try:
            self._update_status("üõ°Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
            if hasattr(self, 'vuln_text'):
                self.vuln_text.delete(1.0, tk.END)
                self.vuln_text.insert(tk.END, "üõ°Ô∏è –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...\n\n")
                self.vuln_text.see(tk.END)
            
            all_vulnerabilities = []
            total_devices = len(self.scanner.devices)
            
            for i, device in enumerate(self.scanner.devices, 1):
                if hasattr(self, 'vuln_text'):
                    progress = f"[{i}/{total_devices}]"
                    self.vuln_text.insert(tk.END, f"{progress} üîç –°–∫–∞–Ω–∏—Ä—É—é {device['ip']} ({device['hostname']})...\n")
                    self.vuln_text.see(tk.END)
                    self.vuln_text.update()
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                ports = [p['port'] for p in device.get('ports', [])]
                vulnerabilities = self.vuln_scanner.scan_device_vulnerabilities(
                    device['ip'], ports if ports else None
                )
                
                all_vulnerabilities.extend(vulnerabilities)
                
                if hasattr(self, 'vuln_text') and vulnerabilities:
                    self.vuln_text.insert(tk.END, f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(vulnerabilities)}\n")
                else:
                    self.vuln_text.insert(tk.END, f"   ‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self.vuln_scanner.generate_vulnerability_report(all_vulnerabilities)
            if hasattr(self, 'vuln_text'):
                self.vuln_text.insert(tk.END, f"\n{'='*50}\n")
                self.vuln_text.insert(tk.END, report)
                self.vuln_text.see(tk.END)
            self._update_status("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {str(e)}\n"
            if hasattr(self, 'vuln_text'):
                self.vuln_text.insert(tk.END, error_msg)
            self._update_status("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
    
    def show_context_menu(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()
    
    def copy_ip(self):
        """–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å IP –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        selection = self.devices_tree.selection()
        if selection:
            item = self.devices_tree.item(selection[0])
            ip = item['values'][0]
            self.root.clipboard_clear()
            self.root.clipboard_append(ip)
            self._update_status(f"üìã IP {ip} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
    
    def show_device_details(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        selection = self.devices_tree.selection()
        if selection:
            item = self.devices_tree.item(selection[0])
            ip = item['values'][0]
            
            details = self.scanner.get_device_details(ip)
            
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
            details_window = tk.Toplevel(self.root)
            details_window.title(f"üîç –î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {ip}")
            details_window.geometry("600x400")
            details_window.configure(bg='#2C3E50')
            
            details_text = scrolledtext.ScrolledText(details_window, 
                                                   bg='#34495E', fg='white',
                                                   font=('Consolas', 10),
                                                   insertbackground='white')
            details_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            details_text.insert(tk.END, details)
            details_text.config(state=tk.DISABLED)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            close_btn = ttk.Button(details_window, text="–ó–∞–∫—Ä—ã—Ç—å", 
                                 command=details_window.destroy)
            close_btn.pack(pady=10)
    
    def _update_info(self, text):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        self.root.after(0, lambda: self.info_text.insert(tk.END, text))
    
    def _update_status(self, text):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        self.root.after(0, lambda: self.status_var.set(text))
