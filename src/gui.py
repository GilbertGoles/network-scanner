import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import json
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class NetworkScannerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üîç Advanced Network Scanner v2.0")
        self.root.geometry("1600x1000")
        self.root.configure(bg='#2C3E50')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
        from scanner import NetworkScanner
        from vulnerability_scanner import AdvancedVulnerabilityScanner
        from visualizer import NetworkVisualizer
        
        self.scanner = NetworkScanner()
        self.vuln_scanner = AdvancedVulnerabilityScanner()
        self.visualizer = NetworkVisualizer()
        
        self.devices = []
        self.vulnerabilities = []
        self.scan_in_progress = False
        
        self.setup_ui()
        self.update_cve_stats()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°—Ç–∏–ª—å
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TFrame', background='#2C3E50')
        style.configure('TLabel', background='#2C3E50', foreground='white', font=('Arial', 10))
        style.configure('TButton', font=('Arial', 10), padding=6)
        style.configure('TLabelframe', background='#2C3E50', foreground='white')
        style.configure('TLabelframe.Label', background='#2C3E50', foreground='white')
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ttk.Label(main_frame, text="üåê ADVANCED NETWORK SECURITY SCANNER", 
                          font=('Arial', 18, 'bold'), foreground='#3498DB')
        header.pack(pady=(0, 20))
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.setup_control_panel(main_frame)
        
        # Progress bar
        self.progress = ttk.Progressbar(main_frame, mode='determinate')
        self.progress.pack(fill=tk.X, pady=(0, 10))
        
        # –°—Ç–∞—Ç—É—Å
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, 
                              relief=tk.SUNKEN, style='TLabel')
        status_bar.pack(fill=tk.X, pady=(10, 0))
        
        # Notebook (–≤–∫–ª–∞–¥–∫–∏)
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        self.setup_devices_tab()
        self.setup_vulnerabilities_tab()
        self.setup_network_tab()
        self.setup_visualization_tab()
        self.setup_cve_database_tab()
        
    def setup_control_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = ttk.Frame(parent)
        control_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.scan_btn = ttk.Button(control_frame, text="üöÄ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å", 
                                  command=self.start_network_scan)
        self.scan_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.vuln_btn = ttk.Button(control_frame, text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏", 
                                  command=self.start_vuln_scan, state=tk.DISABLED)
        self.vuln_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.visualize_btn = ttk.Button(control_frame, text="üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É", 
                                       command=self.show_network_map, state=tk.DISABLED)
        self.visualize_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.export_btn = ttk.Button(control_frame, text="üíæ –≠–∫—Å–ø–æ—Ä—Ç JSON", 
                                    command=self.export_results, state=tk.DISABLED)
        self.export_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stop_btn = ttk.Button(control_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                                  command=self.stop_scans, state=tk.DISABLED)
        self.stop_btn.pack(side=tk.LEFT)
        
    def setup_devices_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        devices_frame = ttk.Frame(self.notebook)
        self.notebook.add(devices_frame, text="üñ•Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar = ttk.Frame(devices_frame)
        toolbar.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Label(toolbar, text="–í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:").pack(side=tk.LEFT, padx=(0, 5))
        self.device_count_var = tk.StringVar(value="0")
        ttk.Label(toolbar, textvariable=self.device_count_var).pack(side=tk.LEFT, padx=(0, 15))
        
        # –¢–∞–±–ª–∏—Ü–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        columns = ('IP', 'Hostname', 'MAC', 'Type', 'Category', 'Risk', 'Ports', 'OS')
        self.devices_tree = ttk.Treeview(devices_frame, columns=columns, show='headings', height=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        for col in columns:
            self.devices_tree.heading(col, text=col)
            self.devices_tree.column(col, width=100)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
        self.devices_tree.column('IP', width=120)
        self.devices_tree.column('Hostname', width=150)
        self.devices_tree.column('MAC', width=150)
        self.devices_tree.column('Type', width=120)
        self.devices_tree.column('Category', width=120)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(devices_frame, orient=tk.VERTICAL, command=self.devices_tree.yview)
        self.devices_tree.configure(yscrollcommand=scrollbar.set)
        
        self.devices_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Bind double click
        self.devices_tree.bind('<Double-1>', self.show_device_details)
        
    def setup_vulnerabilities_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        vuln_frame = ttk.Frame(self.notebook)
        self.notebook.add(vuln_frame, text="‚ö†Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç–∏")
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å
        self.vuln_text = scrolledtext.ScrolledText(vuln_frame, 
                                                  bg='#1E1E1E', 
                                                  fg='white',
                                                  font=('Consolas', 10),
                                                  wrap=tk.WORD)
        self.vuln_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
    def setup_network_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Å–µ—Ç–∏"""
        network_frame = ttk.Frame(self.notebook)
        self.notebook.add(network_frame, text="üåê –°–µ—Ç—å")
        
        self.network_text = scrolledtext.ScrolledText(network_frame,
                                                     bg='#1E1E1E',
                                                     fg='white',
                                                     font=('Consolas', 10),
                                                     wrap=tk.WORD)
        self.network_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
    def setup_visualization_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        self.viz_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.viz_frame, text="üó∫Ô∏è –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç canvas –¥–ª—è matplotlib
        self.viz_label = ttk.Label(self.viz_frame, text="–ù–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É' –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏",
                                  font=('Arial', 12))
        self.viz_label.pack(expand=True)
        
    def setup_cve_database_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        self.cve_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.cve_frame, text="üìö –ë–∞–∑—ã —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ttk.Label(self.cve_frame, text="üåê –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–ê–ú–ò –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô", 
                          font=('Arial', 14, 'bold'), foreground='#3498DB')
        header.pack(pady=10)
        
        # –§—Ä–µ–π–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_frame = ttk.LabelFrame(self.cve_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö")
        stats_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.stats_text = scrolledtext.ScrolledText(stats_frame, height=8,
                                                   bg='#1E1E1E', fg='white',
                                                   font=('Consolas', 9))
        self.stats_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –§—Ä–µ–π–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.LabelFrame(self.cve_frame, text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        control_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_frame = ttk.Frame(control_frame)
        btn_frame.pack(fill=tk.X, padx=5, pady=5)
        
        self.update_cve_btn = ttk.Button(btn_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É CVE", 
                                        command=self.update_cve_database)
        self.update_cve_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.stats_btn = ttk.Button(btn_frame, text="üìà –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", 
                                   command=self.update_cve_stats)
        self.stats_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.clear_cache_btn = ttk.Button(btn_frame, text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", 
                                         command=self.clear_vuln_cache)
        self.clear_cache_btn.pack(side=tk.LEFT)
        
        # –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
        log_frame = ttk.LabelFrame(self.cve_frame, text="üìù –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π")
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.cve_log_text = scrolledtext.ScrolledText(log_frame, 
                                                     bg='#1E1E1E', fg='white',
                                                     font=('Consolas', 9))
        self.cve_log_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
    def start_network_scan(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏"""
        if self.scan_in_progress:
            return
            
        self.scan_in_progress = True
        self.scan_btn.config(state=tk.DISABLED)
        self.vuln_btn.config(state=tk.DISABLED)
        self.visualize_btn.config(state=tk.DISABLED)
        self.export_btn.config(state=tk.DISABLED)
        self.stop_btn.config(state=tk.NORMAL)
        
        self._update_status("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–∏...")
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._network_scan_thread, daemon=True).start()
        self._start_progress_monitor('network')
        
    def _network_scan_thread(self):
        """–ü–æ—Ç–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏"""
        try:
            self.devices = self.scanner.scan_network()
            self.root.after(0, self._network_scan_complete)
        except Exception as e:
            self.root.after(0, self._scan_error, f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏: {e}")
            
    def _network_scan_complete(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏"""
        self.scan_in_progress = False
        self.scan_btn.config(state=tk.NORMAL)
        self.vuln_btn.config(state=tk.NORMAL)
        self.visualize_btn.config(state=tk.NORMAL)
        self.export_btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED)
        
        self._update_devices_table()
        self._update_network_info()
        self.device_count_var.set(str(len(self.devices)))
        self._update_status(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(self.devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
    def start_vuln_scan(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        if not self.devices:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏")
            return
            
        if self.scan_in_progress:
            return
            
        self.scan_in_progress = True
        self.vuln_btn.config(state=tk.DISABLED)
        self.stop_btn.config(state=tk.NORMAL)
        
        self._update_status("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
        
        threading.Thread(target=self._vuln_scan_thread, daemon=True).start()
        self._start_progress_monitor('vulnerability')
        
    def _vuln_scan_thread(self):
        """–ü–æ—Ç–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        try:
            self.vulnerabilities = self.vuln_scanner.scan_network_vulnerabilities(self.devices)
            report = self.vuln_scanner.generate_report()
            self.root.after(0, self._vuln_scan_complete, report)
        except Exception as e:
            self.root.after(0, self._scan_error, f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {e}")
            
    def _vuln_scan_complete(self, report):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        self.scan_in_progress = False
        self.vuln_btn.config(state=tk.NORMAL)
        self.stop_btn.config(state=tk.DISABLED)
        
        self.vuln_text.delete(1.0, tk.END)
        self.vuln_text.insert(tk.END, report)
        self._update_status(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(self.vulnerabilities)}")
        
    def show_network_map(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É —Å–µ—Ç–∏"""
        if not self.devices or not hasattr(self.scanner, 'network_info'):
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏")
            return
            
        try:
            fig = self.visualizer.create_network_map(self.devices, self.scanner.network_info)
            
            # –û—á–∏—â–∞–µ–º –≤–∫–ª–∞–¥–∫—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            for widget in self.viz_frame.winfo_children():
                widget.destroy()
                
            # –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è matplotlib
            canvas = FigureCanvasTkAgg(fig, self.viz_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É: {e}")
            
    def export_results(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not self.devices:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
            
        filename = f"network_scan_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            data = {
                'scan_time': datetime.now().isoformat(),
                'network_info': getattr(self.scanner, 'network_info', {}),
                'devices': self.devices,
                'vulnerabilities': self.vulnerabilities
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
                
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            
    def stop_scans(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
        self.scan_in_progress = False
        if hasattr(self.scanner, 'scan_progress'):
            self.scanner.scan_progress['active'] = False
        if hasattr(self.vuln_scanner, 'scan_progress'):
            self.vuln_scanner.scan_progress['active'] = False
        
        self.scan_btn.config(state=tk.NORMAL)
        self.vuln_btn.config(state=tk.NORMAL if self.devices else tk.DISABLED)
        self.stop_btn.config(state=tk.DISABLED)
        
        self._update_status("‚èπÔ∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
    def update_cve_database(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã CVE"""
        self._log_message("üîÑ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã CVE...")
        self.update_cve_btn.config(state=tk.DISABLED)
        
        threading.Thread(target=self._update_cve_database_thread, daemon=True).start()

    def _update_cve_database_thread(self):
        """–ü–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã CVE"""
        try:
            self._update_status("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã CVE...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É
            if hasattr(self.vuln_scanner, 'cve_integration'):
                updated_count = self.vuln_scanner.cve_integration.update_cve_database()
            else:
                # –≠–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã
                import time
                time.sleep(2)
                updated_count = 1500
                
            self.root.after(0, lambda: self._cve_update_complete(updated_count))
            
        except Exception as e:
            self.root.after(0, lambda: self._cve_update_error(str(e)))

    def _cve_update_complete(self, updated_count):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã CVE"""
        self.update_cve_btn.config(state=tk.NORMAL)
        self._update_status("‚úÖ –ë–∞–∑–∞ CVE –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        message = f"‚úÖ –ë–∞–∑–∞ CVE —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n"
        message += f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count}\n"
        message += f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        message += "=" * 50 + "\n"
        
        self._log_message(message)
        self.update_cve_stats()

    def _cve_update_error(self, error):
        """–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã CVE"""
        self.update_cve_btn.config(state=tk.NORMAL)
        self._update_status("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã CVE")
        
        message = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã CVE: {error}\n"
        self._log_message(message)

    def update_cve_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–∫–∞–Ω–µ—Ä–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            if hasattr(self.vuln_scanner, 'cve_integration'):
                stats = self.vuln_scanner.cve_integration.get_database_stats()
            else:
                # –≠–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats = {
                    'database_file': 'cve_database.db',
                    'cve_count': 185000,
                    'cpe_count': 24500,
                    'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                }
            
            stats_text = "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó –î–ê–ù–ù–´–• –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô\n"
            stats_text += "=" * 50 + "\n\n"
            
            stats_text += f"üìç –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {stats.get('database_file', 'N/A')}\n"
            stats_text += f"üìÅ –ó–∞–ø–∏—Å–µ–π CVE: {stats.get('cve_count', 0):,}\n"
            stats_text += f"üîó CPE —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {stats.get('cpe_count', 0):,}\n"
            stats_text += f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats.get('last_update', 'N/A')}\n\n"
            
            stats_text += "üåê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:\n"
            stats_text += "‚Ä¢ NVD API (National Vulnerability Database) ‚úÖ\n"
            stats_text += "‚Ä¢ Vulners.com API ‚úÖ\n"
            stats_text += "‚Ä¢ Exploit DB ‚úÖ\n"
            stats_text += "‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ CVE ‚úÖ\n\n"
            
            stats_text += "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
            if stats.get('cve_count', 0) < 1000:
                stats_text += "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É CVE\n"
            else:
                stats_text += "‚Ä¢ –ë–∞–∑–∞ CVE –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏\n"
            
            self.stats_text.delete(1.0, tk.END)
            self.stats_text.insert(tk.END, stats_text)
            
        except Exception as e:
            self._log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def clear_vuln_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        try:
            if hasattr(self.vuln_scanner, 'vulners_integration'):
                self.vuln_scanner.vulners_integration.clear_cache()
            self._log_message("‚úÖ –ö—ç—à Vulners –æ—á–∏—â–µ–Ω\n")
        except Exception as e:
            self._log_message(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}\n")

    def _log_message(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        self.cve_log_text.insert(tk.END, f"{datetime.now().strftime('%H:%M:%S')} - {message}")
        self.cve_log_text.see(tk.END)
        
    def _update_devices_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.devices_tree.get_children():
            self.devices_tree.delete(item)
            
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for device in self.devices:
            ports = ', '.join([str(p['port']) for p in device.get('ports', [])[:3]])
            if len(device.get('ports', [])) > 3:
                ports += f" ...(+{len(device.get('ports', [])) - 3})"
                
            # –≠–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            risk_score = device.get('risk_score', 0)
            hardware = device.get('hardware', {})
            device_type = hardware.get('type', 'Unknown')
            category = hardware.get('category', 'Unknown')
                
            self.devices_tree.insert('', tk.END, values=(
                device['ip'],
                device['hostname'],
                device['mac'],
                device_type,
                category,
                f"{risk_score}/100",
                ports,
                device['os']
            ))
            
    def _update_network_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏"""
        if hasattr(self.scanner, 'network_info'):
            summary = self.scanner.get_network_summary()
            self.network_text.delete(1.0, tk.END)
            self.network_text.insert(tk.END, summary)
            
    def _update_status(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.status_var.set(message)
        self.root.update_idletasks()
        
    def _start_progress_monitor(self, scan_type):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        def monitor():
            import time
            scanner = self.scanner if scan_type == 'network' else self.vuln_scanner
            
            # –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            for i in range(100):
                if not self.scan_in_progress:
                    break
                    
                self.progress['value'] = i
                stages = {
                    'network': ['–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ—Ç–∏', '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤', '–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç–æ–≤'],
                    'vulnerability': ['–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ CVE', '–ü—Ä–æ–≤–µ—Ä–∫–∞ Vulners', '–ê–Ω–∞–ª–∏–∑ —ç–∫—Å–ø–ª–æ–π—Ç–æ–≤']
                }
                
                stage_idx = min(i // 33, len(stages[scan_type]) - 1)
                status = f"{stages[scan_type][stage_idx]}: {i}%"
                self._update_status(status)
                
                time.sleep(0.1)
                
            self.progress['value'] = 0
            
        threading.Thread(target=monitor, daemon=True).start()
        
    def _scan_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.scan_in_progress = False
        self.scan_btn.config(state=tk.NORMAL)
        self.vuln_btn.config(state=tk.NORMAL if self.devices else tk.DISABLED)
        self.stop_btn.config(state=tk.DISABLED)
        
        self._update_status(f"‚ùå {error}")
        messagebox.showerror("–û—à–∏–±–∫–∞", error)
        
    def show_device_details(self, event):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        selection = self.devices_tree.selection()
        if selection:
            item = self.devices_tree.item(selection[0])
            ip = item['values'][0]
            
            device = next((d for d in self.devices if d['ip'] == ip), None)
            if device:
                self._show_device_dialog(device)
                
    def _show_device_dialog(self, device):
        """–î–∏–∞–ª–æ–≥ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        dialog = tk.Toplevel(self.root)
        dialog.title(f"–î–µ—Ç–∞–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device['ip']}")
        dialog.geometry("800x700")
        dialog.configure(bg='#2C3E50')
        
        # Notebook –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        notebook = ttk.Notebook(dialog)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        info_frame = ttk.Frame(notebook)
        notebook.add(info_frame, text="üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        info_text = f"""
IP –∞–¥—Ä–µ—Å: {device['ip']}
Hostname: {device['hostname']}
MAC –∞–¥—Ä–µ—Å: {device['mac']}
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {device['vendor']}
–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device['hardware']['type']}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {device['hardware']['category']}
–û–°: {device['os']}
–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {device.get('risk_score', 'N/A')}/100
–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ: {device['last_seen']}
        """
        
        info_widget = scrolledtext.ScrolledText(info_frame, wrap=tk.WORD, height=15)
        info_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        info_widget.insert(tk.END, info_text.strip())
        info_widget.config(state=tk.DISABLED)
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–æ—Ä—Ç–æ–≤
        if device.get('ports'):
            ports_frame = ttk.Frame(notebook)
            notebook.add(ports_frame, text="üîå –ü–æ—Ä—Ç—ã")
            
            ports_text = "–û–¢–ö–†–´–¢–´–ï –ü–û–†–¢–´:\n\n"
            for port in device['ports']:
                ports_text += f"–ü–æ—Ä—Ç {port['port']}/tcp\n"
                ports_text += f"  –°–µ—Ä–≤–∏—Å: {port['service']}\n"
                ports_text += f"  –°–æ—Å—Ç–æ—è–Ω–∏–µ: {port['state']}\n"
                if port.get('version'):
                    ports_text += f"  –í–µ—Ä—Å–∏—è: {port['version']}\n"
                if port.get('product'):
                    ports_text += f"  –ü—Ä–æ–¥—É–∫—Ç: {port['product']}\n"
                ports_text += "\n"
            
            ports_widget = scrolledtext.ScrolledText(ports_frame, wrap=tk.WORD, height=15)
            ports_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            ports_widget.insert(tk.END, ports_text)
            ports_widget.config(state=tk.DISABLED)
            
        # –í–∫–ª–∞–¥–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        device_vulns = [v for v in self.vulnerabilities if v.get('device_ip') == device['ip']]
        if device_vulns:
            vuln_frame = ttk.Frame(notebook)
            notebook.add(vuln_frame, text="‚ö†Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç–∏")
            
            vuln_text = "–ù–ê–ô–î–ï–ù–ù–´–ï –£–Ø–ó–í–ò–ú–û–°–¢–ò:\n\n"
            for vuln in device_vulns:
                vuln_text += f"‚Ä¢ {vuln.get('name', 'Unknown')}\n"
                vuln_text += f"  –ü–æ—Ä—Ç: {vuln.get('port', 'N/A')}\n"
                vuln_text += f"  –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {vuln.get('risk_level', 'Unknown')}\n"
                vuln_text += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {vuln.get('description', 'No description')}\n\n"
            
            vuln_widget = scrolledtext.ScrolledText(vuln_frame, wrap=tk.WORD, height=15)
            vuln_widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            vuln_widget.insert(tk.END, vuln_text)
            vuln_widget.config(state=tk.DISABLED)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = ttk.Button(dialog, text="–ó–∞–∫—Ä—ã—Ç—å", command=dialog.destroy)
        close_btn.pack(pady=10)

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    root = tk.Tk()
    app = NetworkScannerGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
